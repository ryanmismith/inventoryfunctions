% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TallestTrees.R
\name{TallestTrees}
\alias{TallestTrees}
\title{Average Height of the 100 Tallest Trees}
\usage{
TallestTrees(ID, HT, EXPF)
}
\arguments{
\item{ID}{Unique Plot ID for each plot in your data set.}

\item{HT}{Height of each tree in meters.}

\item{EXPF}{Expansion factor of each tree.}
}
\value{
The function returns a vector of length n with the 100 tallest trees in each plot.
}
\description{
\subsection{This function requires that your data.frame be sorted as detailed in examples before running.}{

This function calculates the average height of the 100 tallest trees in your data set. Using the EXPF and heights provided
the 100 tallest trees will be identified and averaged. This mean value will then be applied to a variable listing the average
of the tallest trees within the plot as an observation for each tree in your data set.
}
}
\details{
This function uses the dplyr package to select, arrange, and mutate the data.

Your data should include unique IDs specific to each plot. If you have not done this, it can be done using the
Unique.ID function included in this package. This function requires either a measured or predicted height for each
tree in your inventory. If you have not added predicted values where this is no tree HT measurement, use the Height Predict
function in this package.
}
\examples{

\dontrun{
 ###### RUNNING THE SCRIPT ######
 ###### REQUIRES FULL VECTORS #####
 ###### AS SEEN HERE ######

 trees$Tallest <-  TallestTrees(trees$ID, trees$HT, trees#EXPF)

 ##### RUN WITH FULL VECTORS AND NOT WITH MAPPLY #####

# If you don't have predicted heights or IDs

data(tree_data)

trees <- tree_data

cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("EastSI_ENSEMBLE_rcp60_2030.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030

trees <- trees \%>\%
dplyr::mutate(
 EXPF = EXP.F(DBH, BAF),
 BA = BA(DBH),
 CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
 ID = Unique.ID(Stand, Plot),
)
trees <- trees \%>\%
 dplyr::group_by(ID) \%>\%
 dplyr::arrange(desc(DBH), .by_group = TRUE)
trees <- trees \%>\%
 dplyr::mutate(
   BAL = BA.Larger.Trees(ID, DBH, BA)
 )

 trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI,
     trees$CCF, trees$BAL, trees$Plot, trees$HT)

 trees$Tallest <-  TallestTrees(trees$ID, trees$HT, trees#EXPF)
}


}
\seealso{
\link{Unique.ID}

\link{HeightPredict}

\link{EXPF}

Other Plot Level Functions: 
\code{\link{BA.Larger.Trees}()},
\code{\link{BAPH}()},
\code{\link{CCF.Larger}()},
\code{\link{CrownCompF}()},
\code{\link{HeightPredict}()},
\code{\link{SDI.Max}()},
\code{\link{SDI.Plot}()},
\code{\link{TPH}()},
\code{\link{Unique.ID}()}
}
\concept{Plot Level Functions}
