trees <- trees %>%
dplyr::mutate(
ba.SW = ifelse(SPPtype == "SW", treeBA, 0)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
pHW.ba = (1 - sum(ba.SW)/BAhectare)
)
### Elevation ###
if(is.null(SpatialPointsDF) == FALSE) {
getpoints <- elevatr::get_elev_point(SpatialPointsDF)
trees$ELEV <- getpoints[[3]]
} else if (is.null(project) == FALSE) {
project <- project
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- getpoints[[1]]
} else {
project <- "EPSG:4326"
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- getpoints[[1]]
}
### Calculate SDIMax ###
for (i in 1:length(trees$Tree)){
trees$x[i] <- (483.2448 - (1.456*trees$pHW.ba[i]) - (212.705*log(trees$meanSG[i])) +
(45.351*sqrt(trees$DBH.RANGE[i])) + (14.811*trees$SPP.DIV[i]) - (0.0848*trees$ELEV[i]) +
(0.0001*trees$ELEV[i]^2) + (331.3714*(1/trees$CSI[i])))
}
x <- round(trees$x, 2)
return(x)
}
}
View(trees)
trees <- trees %>%
mutate(
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
trees <- trees %>%
mutate(
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
View(trees)
SDI.Max(Stand, Plot, Tree, SPP, DBH, EXPF, CSI, X, Y)
View(trees)
a <- mapply(SDI.Max, trees$Stand, trees$Plot, trees$Tree, trees$SPP, trees$DBH, trees$EXPF, trees$CSI, trees$X, trees$Y)
project <- "EPSG:4326"
coords <- cbind(trees$X, trees$Y)
warnings()
View(coords)
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
coords <- data.frame(coords)
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
View(getpoints)
getpoints[1]
getpoints[[1]]
unlist(getpoints[[1]])
trees$ELEV <- unlist(getpoints[[1]])
warnings()
X <- unlist(getpoints[[1]])
warnings()
SDI.Max <- function(Stand, Plot, Tree, SPP, DBH, EXPF,
CSI = NULL, X_Coord = NULL, Y_Coord = NULL, project = NULL, SpatialPointsDF = NULL){
if(is.null(CSI) == TRUE | (is.null(X_Coord) == TRUE && is.null(SpatialPointsDF) == TRUE)){
### Simple SDI Max Equation ###
SPP.Attributes <- sapply(SPP, SPP.func)
SPP.SG <- as.vector(SPP.Attributes[3,])
SPP.SG <- as.numeric(SPP.SG)
trees <- data.frame(Stand, Plot, Tree, SPP, EXPF, SPP.SG)
### Trees Per Hectare ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
TPH = sum(EXPF)
)
### Mean Standard Gravity ###
trees <- trees %>%
dplyr::mutate(
Tree.Factor.SG = (SPP.SG * EXPF)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
sgm = (sum(Tree.Factor.SG) / mean(TPH))
)
### SDI.Max Per Plot ###
trees <- trees %>%
dplyr:: mutate(
Max = ((-6017.3 * sgm) + 4156.3)
)
x <- round(trees$Max, 2)
print("Without Climate Site Index Variables and either Plot X and Y values or a SpatialPointsDF this function is using Woodall's SDImax equation")
return(x)
} else {
### Species Attributes ###
SPP.Attributes <- sapply(SPP, SPP.func)
SPP.SG  <- as.vector(SPP.Attributes[3,])
SPP.SG  <- as.numeric(SPP.SG)
SPPtype <- as.vector(SPP.Attributes[1,])
SPPtype <- as.character(SPPtype)
trees   <- data.frame(Stand, Plot, Tree, SPP, EXPF, DBH, CSI, SPPtype, SPP.SG)
x       <- X_Coord
y       <- Y_Coord
coords  <- data.frame(x, y)
### Trees Per Hectare ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
TPH = sum(EXPF)
)
### Mean Standard Gravity ###
trees <- trees %>%
dplyr::mutate(
Tree.Factor.SG = (SPP.SG * EXPF)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
meanSG = (sum(Tree.Factor.SG) / mean(TPH))
)
### Number of Unique Species ###
trees$SPP.DIV <- (length(unique(trees$SPP)))
### DBH Range ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
DBH.RANGE = max(DBH) - min(DBH)
)
### Tree Basal Area ###
trees<- trees %>%
dplyr::mutate(
treeBA = BA(DBH)*EXPF
)
### Basal Area Per Hectare ###
trees <- trees %>%
dplyr::group_by(Stand, Plot) %>%
dplyr::mutate(
BAhectare = sum(treeBA)
)
### Basal Percent Hardwood ###
trees <- trees %>%
dplyr::mutate(
ba.SW = ifelse(SPPtype == "SW", treeBA, 0)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
pHW.ba = (1 - sum(ba.SW)/BAhectare)
)
### Elevation ###
if(is.null(SpatialPointsDF) == FALSE) {
getpoints <- elevatr::get_elev_point(SpatialPointsDF)
trees$ELEV <- unlist(getpoints[[3]])
} else if (is.null(project) == FALSE) {
project <- project
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- unlist(getpoints[[1]])
} else {
project <- "EPSG:4326"
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- unlist(getpoints[[1]])
}
### Calculate SDIMax ###
for (i in 1:length(trees$Tree)){
trees$x[i] <- (483.2448 - (1.456*trees$pHW.ba[i]) - (212.705*log(trees$meanSG[i])) +
(45.351*sqrt(trees$DBH.RANGE[i])) + (14.811*trees$SPP.DIV[i]) - (0.0848*trees$ELEV[i]) +
(0.0001*trees$ELEV[i]^2) + (331.3714*(1/trees$CSI[i])))
}
x <- round(trees$x, 2)
return(x)
}
}
SDI.Max <- function(Stand, Plot, Tree, SPP, DBH, EXPF,
CSI = NULL, X_Coord = NULL, Y_Coord = NULL, project = NULL, SpatialPointsDF = NULL){
if(is.null(CSI) == TRUE | (is.null(X_Coord) == TRUE && is.null(SpatialPointsDF) == TRUE)){
### Simple SDI Max Equation ###
SPP.Attributes <- sapply(SPP, SPP.func)
SPP.SG <- as.vector(SPP.Attributes[3,])
SPP.SG <- as.numeric(SPP.SG)
trees <- data.frame(Stand, Plot, Tree, SPP, EXPF, SPP.SG)
### Trees Per Hectare ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
TPH = sum(EXPF)
)
### Mean Standard Gravity ###
trees <- trees %>%
dplyr::mutate(
Tree.Factor.SG = (SPP.SG * EXPF)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
sgm = (sum(Tree.Factor.SG) / mean(TPH))
)
### SDI.Max Per Plot ###
trees <- trees %>%
dplyr:: mutate(
Max = ((-6017.3 * sgm) + 4156.3)
)
x <- round(trees$Max, 2)
print("Without Climate Site Index Variables and either Plot X and Y values or a SpatialPointsDF this function is using Woodall's SDImax equation")
return(x)
} else {
### Species Attributes ###
SPP.Attributes <- sapply(SPP, SPP.func)
SPP.SG  <- as.vector(SPP.Attributes[3,])
SPP.SG  <- as.numeric(SPP.SG)
SPPtype <- as.vector(SPP.Attributes[1,])
SPPtype <- as.character(SPPtype)
trees   <- data.frame(Stand, Plot, Tree, SPP, EXPF, DBH, CSI, SPPtype, SPP.SG)
x       <- X_Coord
y       <- Y_Coord
coords  <- data.frame(x, y)
### Trees Per Hectare ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
TPH = sum(EXPF)
)
### Mean Standard Gravity ###
trees <- trees %>%
dplyr::mutate(
Tree.Factor.SG = (SPP.SG * EXPF)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
meanSG = (sum(Tree.Factor.SG) / mean(TPH))
)
### Number of Unique Species ###
trees$SPP.DIV <- (length(unique(trees$SPP)))
### DBH Range ###
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
DBH.RANGE = max(DBH) - min(DBH)
)
### Tree Basal Area ###
trees<- trees %>%
dplyr::mutate(
treeBA = BA(DBH)*EXPF
)
### Basal Area Per Hectare ###
trees <- trees %>%
dplyr::group_by(Stand, Plot) %>%
dplyr::mutate(
BAhectare = sum(treeBA)
)
### Basal Percent Hardwood ###
trees <- trees %>%
dplyr::mutate(
ba.SW = ifelse(SPPtype == "SW", treeBA, 0)
)
trees <- trees %>%
dplyr::group_by(Plot, Stand) %>%
dplyr::mutate(
pHW.ba = (1 - sum(ba.SW)/BAhectare)
)
### Elevation ###
if(is.null(SpatialPointsDF) == FALSE) {
getpoints <- elevatr::get_elev_point(SpatialPointsDF)
trees$ELEV <- unlist(getpoints[[3]])
} else if (is.null(project) == FALSE) {
project <- project
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- unlist(getpoints[[1]])
} else {
project <- "EPSG:4326"
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- unlist(getpoints[[1]])
}
### Calculate SDIMax ###
for (i in 1:length(trees$Tree)){
trees$x[i] <- (483.2448 - (1.456*trees$pHW.ba[i]) - (212.705*log(trees$meanSG[i])) +
(45.351*sqrt(trees$DBH.RANGE[i])) + (14.811*trees$SPP.DIV[i]) - (0.0848*trees$ELEV[i]) +
(0.0001*trees$ELEV[i]^2) + (331.3714*(1/trees$CSI[i])))
}
x <- round(trees$x, 2)
return(x)
}
}
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
library(inventoryfunctions)
### Tree and Plot Level Data ###
trees$EXPF <- 26
trees <- trees %>%
mutate(
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
View(trees)
coords <- data.frame(trees$X, trees$Y)
project <- "EPSG:4326"
getpoints <- elevatr::get_elev_point(coords, units = "meters", prj = project, src = "aws")
trees$ELEV <- unlist(getpoints[[1]])
View(trees)
sessionInfo()
devtools::document()
document()
devtools::document()
library(inventoryfunctions)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees$EXPF <- 26
trees <- trees %>%
mutate(
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
View(trees)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
tempvol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$TreeVol <- tempvol * trees$EXPF
rm(tempvol)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(HT), .by_group = TRUE)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
warnings()
TallestTrees <- function(ID, HT, EXPF){
Temp <- data.frame(ID, HT, EXPF)
Temp <- Temp[order(-HT),]
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)
for (i in Temp){
if(Temp$csum[i] <= 100){
Temp$X[i] = Temp$HT[i] * Temp$EXPF[i]
Temp$Counts[i] = Temp$csum[i]
} else {
Temp$X[i] = NA
Temp$Counts[i] = NA
}
}
if(Temp$Counts >= 100){
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))  # Number of trees not included in X
Temp$minheight <- ave(Temp$Counts, Temp$ID, FUN = function(x) Temp$HT[1 + which.max(x)]) # Height of tree not included in X
for (i in 1:length(Temp$remainder)){    # Create column with total combined heights of trees that were missing from column x
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE)) #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                        # Create column with combined heights of 100 tallest trees
}
Temp$Result <- ave(Temp$Total, Temp$ID, FUN = function(x) x/100)       # Divide the combined height of 100 tallest trees by 100.
round(Temp$Result, 2)
} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
TallestTrees <- function(ID, HT, EXPF){
Temp <- data.frame(ID, HT, EXPF)
Temp <- Temp[order(-HT),]
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)
for (i in 1:length(Temp$csum)){
if(Temp$csum[i] <= 100){
Temp$X[i] = Temp$HT[i] * Temp$EXPF[i]
Temp$Counts[i] = Temp$csum[i]
} else {
Temp$X[i] = NA
Temp$Counts[i] = NA
}
}
if(Temp$Counts >= 100){
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))  # Number of trees not included in X
Temp$minheight <- ave(Temp$Counts, Temp$ID, FUN = function(x) Temp$HT[1 + which.max(x)]) # Height of tree not included in X
for (i in 1:length(Temp$remainder)){    # Create column with total combined heights of trees that were missing from column x
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE)) #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                        # Create column with combined heights of 100 tallest trees
}
Temp$Result <- ave(Temp$Total, Temp$ID, FUN = function(x) x/100)       # Divide the combined height of 100 tallest trees by 100.
round(Temp$Result, 2)
} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
TallestTrees <- function(ID, HT, EXPF){
Temp <- data.frame(ID, HT, EXPF)
Temp <- Temp[order(-HT),]
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)
for (i in 1:length(Temp$csum)){
if(Temp$csum[i] <= 100){
Temp$X[i] = Temp$HT[i] * Temp$EXPF[i]
Temp$Counts[i] = Temp$csum[i]
} else {
Temp$X[i] = 0
Temp$Counts[i] = 0
}
}
if(Temp$Counts >= 100){
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))  # Number of trees not included in X
Temp$minheight <- ave(Temp$Counts, Temp$ID, FUN = function(x) Temp$HT[1 + which.max(x)]) # Height of tree not included in X
for (i in 1:length(Temp$remainder)){    # Create column with total combined heights of trees that were missing from column x
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE)) #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                        # Create column with combined heights of 100 tallest trees
}
Temp$Result <- ave(Temp$Total, Temp$ID, FUN = function(x) x/100)       # Divide the combined height of 100 tallest trees by 100.
round(Temp$Result, 2)
} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
devtools::document()
library(roxygen2)
library(devtools)
document()
library(inventoryfunctions)
