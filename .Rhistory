ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "dodge")
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), size = 2.5)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), size = 2.5, position = "jitter")
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), size = 1, position = "jitter")
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), size = 1)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy), size = 1, position = "jitter")
ggplot(data = mpg) +
geom_point(aes(x = cty, y = hwy), size = 1, position = "jitter")
ggplot(data = mpg) +
geom_point(aes(x = cty, y = hwy), size = 1)
ggplot(data = mpg) +
geom_point(aes(x = cty, y = hwy), size = 1,  position = "jitter")
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_bo
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip() +
GeomBoxplot
nz <- map_data("nz")
install.packages("maps")
("nz")
nz <- map_data("nz")
View(mpg)
View(nz)
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(fill = "red", color = "black")
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black")
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
View(nz)
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL))
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar
bar + coord_flip()
bar + coord_polar
bar + coord_polar()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
source('~/.active-rstudio-document', echo=TRUE)
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
install.packages("mapproj")
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
install.packages(c("backports", "broom", "cli", "codetools", "colorspace", "config", "cpp11", "data.table", "DataExplorer", "dbplyr", "digest", "emmeans", "foreign", "future", "geepack", "generics", "ggraph", "ggrepel", "gh", "globals", "graphlayouts", "Hmisc", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "lme4", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "odbc", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "psych", "r2d3", "R6", "RcppArmadillo", "RcppEigen", "rFIA", "rgl", "rlang", "rlas", "rmarkdown", "rprojroot", "rstudioapi", "sparklyr", "spatstat.data", "StanHeaders", "statmod", "testthat", "tinytex", "usethis", "V8", "vctrs", "vegan", "xfun"))
View(nz)
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
nz <- map_data("nz")
library(tidyverse)
data("mpg")
data("diamonds")
nz <- map_data("nz")
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
?coord_map
1/200*3
1/22
1/22*30
test <- function(x){
if x ≠ 1
print(X IS NOT 1)
else
print(X is 1)
}
test <- function(x){
if x != 1
print(X IS NOT 1)
else
print(X is 1)
}
test <- function(x){
if x != 1
print(X IS NOT 1)
else
print(X is 1)
}
test <- function(x){
if x != 1
print("X IS NOT 1")
else
print("X is 1")
}
test <- function(x){
x != 1
print("X IS NOT 1")
else
print("X is 1")
}
test <- function(num){
if num != 1
print("X IS NOT 1")
else
print("X is 1")
}
test <- function(num){
if num != 1
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test(1)
test(2)
test <- function(num){
if(num ≥ 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test <- function(num){
if(num >= 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test(-2)
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test(-2)
if num != 1
test(-2)
source('~/.active-rstudio-document', echo=TRUE)
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
profvis::profvis({test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}})
nz <- map_data("nz")
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
View(nz)
nz <- map_data("nz")
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_map()
View(nz)
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(alpha = 2/5, fill = "red", color = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar + coord_flip()
bar + coord_polar()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 2, aes(color = drv)) +
str(mpg)
ggplot(data = diamonds) +
geom_bar(aes(cut, ..prop.., group = 5))
str(diamonds)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "dodge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/5, position = "dodge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 2/5, position = "dodge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 2/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 2/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 6/7, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 1/7, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 1/7, position = "identity") +
coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/7, position = "identity") +
coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
alpha = 4/7, position = "identity")
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is 1")
print(bob)
}
test(1)
test(7392)
test(1)
test(38534543534462362464)
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is" num)
print(bob)
}
bob <- c("X is", num)
print(bob)
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is", num)
print(bob)
}
test <- function(num){
if(num != 1)
bob <- c("X IS NOT 1")
else
bob <- c("X is", num)
print(bob)
}
test(323432)
bob <- c("X is 1")
test <- function(num){
if(num != 1)
bob <- c("X is", num)
else
bob <- c("X is 1")
print(bob)
}
test(3234234)
seq(1,10,2)
View(test)
library(nycflights13)
library(nycflights13)
data("flights")
force(flights)
view(flights)
str(flights)
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
View(jan1)
dec25 <- flights %>% filter(month == 1, day == 1)
dec25 <- filter(flights, month == 1, day == 1)
near(sqrt(2)^2, 2)
nov_dec <- filter(flights, month == 11 | 12)
nov_dec <- filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11,12))
delay_test <- filter(flights, !(arr_delay > 120 | dep_delay > 120))
delay_test <- filter(flights, arr_delay <= 120, dep_delay <= 120)
str(flights)
houston <- filter(flights, dest %in% c("IAH", "HOU"))
View(houston)
two_hour_delay <- filter(flights, arr_delay >= 120)
jan1 <- arrange(jan1, year, month, day)
View(jan1)
jan1 <- arrange(jan1, sched_arr_time, carrier)
View(jan1)
jan1 <- arrange(jan1, desc(sched_arr_time), carrier)
View(jan1)
arrange(flights, desc(is.na(carrier)))
arrange(flights, desc(is.na(arr_delay))
arrange(flights, desc(is.na(arr_delay))
arrange(flights, desc(is.na(arr_delay))
arrange(flights, desc(is.na(arr_delay)))
head(flights)
arrange(flights, air_time)
str(flights)
View(flights)
arrange(flights, air_time)
View(flights)
arrange(flights, desc(air_time))
arrange(flights, desc(dep_time))
arrange(flights, desc(arr_time))
arrange(flights, (arr_time))
days <- select(flights, year, month, days)
days <- select(flights, year, month, day)
View(days)
days <- select(flights, year:day)
days <- select(flights, year:arr_time)
arrival <- select(flights, starts_with(arr))
arrival <- select(flights, starts_with("arr"))
View(arrival)
hou <- select(flights, contains("HOU"))
View(hou)
rename(fights, arr_time = arrival_time)
rename(flights, arr_time = arrival_time)
rename(flights, carrier = airline)
rename(flights, airline = carrier)
select(flights, airline, airline, airline)
select(flights, carrier, carrier, carrier)
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
mutuate(flights_sml, gain = arr_delay - dep_delay, speed = distance/air_time*60)
mutate(flights_sml, gain = arr_delay - dep_delay, speed = distance/air_time*60)
library(nycflights13)
data("flights")
mutate(flights, time_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
library(tidyverse)
mutate(flights, time_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
mutate(flights, time_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
flights$time_since_midnight
mutate(flights, time_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
View(flights)
flights <- mutate(flights, time_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
flights$time_since_midnight
flights$dep_time
flights <- mutate(flights, min_since_midnight = (dep_time %/% 100)*60 + (dep_time %% 100))
str(flights)
830 - 517
?min_rank
min_rank(desc(flights$dep_delay))
flights$dep_delay
arrange(desc(dep_delay))
arrange(flights, desc(dep_delay))
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
summarize(flights, delay = mean(arr_delay, na.rm = TRUE))
dept_delay_by_day <- flights %>% group_by(year, month, day) %>% summarize(mean(dep_delay))
View(dept_delay_by_day)
dept_delay_by_day <- flights %>% group_by(year, month, day) %>% summarize(mean(dep_delay, na.rm = TRUE))
View(dept_delay_by_day)
colnames(dept_delay_by_day[4] = "Average Delay")
View(dept_delay_by_day)
str(dept_delay_by_day)
dept_delay_by_day <- dept_delay_by_day %>% rename(mean(dep_delay, na.rm = TRUE) = Mean Delay)
dept_delay_by_day <- dept_delay_by_day %>% rename(`mean(dep_delay, na.rm = TRUE)` = Mean Delay)
dept_delay_by_day <- dept_delay_by_day %>% rename(`mean(dep_delay, na.rm = TRUE)` = Mean Delay)
dept_delay_by_day <- dept_delay_by_day %>% rename(mean(dep_delay, na.rm = TRUE) = Mean Delay)
dept_delay_by_day <- dept_delay_by_day %>% rename(mean(dep_delay, na.rm = TRUE) = Mean Delay)
dept_delay_by_day$`mean(dep_delay, na.rm = TRUE)`
colnames(dept_delay_by_day)[4] <- "Mean Delay"
View(dept_delay_by_day)
colnames(dept_delay_by_day)[4] <- "Mean Delay"
library(pkgs)
pkgs<-c("ggplot2", "shiny", "knitr", "markdown", "plyr", "dplyr")
library(pkgs)
library(knitr)
library(tidyverse)
library(plyr)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(markdown)
library(shiny)
install.packages(c("tidyverse", "palmerpenguins", "gganimate", "gifski", "leaflet"))
library(inventoryfunctions)
library(inventoryfunctions)
# Necessary Libraries -----------------------------------------------------
library(tidyverse)
library(ggplot2)
library(dplyr)
source('~/Thesis/R Script/My Scripts/Thesis_Scripts/Inventory Functions.R', echo=TRUE)
source('~/Thesis/R Script/My Scripts/Inventory Functions.R', echo=TRUE)
AGS.UGS(1, 1, 1, )
AGS.UGS(1, 1, 1, 'RO', 25, 14, .5, 'AGS')
2.5583/8.9912
library(inventoryfunctions)
trees <- read_csv('/Users/ryansmith/Thesis/Practice Data/PEF.Inv.Data.for.FVS.TREE.csv')
trees_2010 <- trees %>% filter(YEAR == 2010)
trees_2010 <- trees_2010 %>%
mutate(
DBH = DBH*2.54,
HT = HT*0.3048,
EXPF = EXPF*2.47,
SDIPlot = SDI.Plot(STAND, PLOT, TREE, DBH, EXPF),
SDIMax = SDI.Max(STAND, PLOT, TREE, SP, EXPF),
BA = BA(DBH),
CCF = CrownCompF(STAND, PLOT, TREE, SP, DBH, EXPF),
ID = Unique.ID(STAND, PLOT),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(STAND, PLOT, BA, EXPF),
TPH = TPH(STAND, PLOT, DBH, EXPF)
)
tempvol <- mapply(KozakTreeVol, 'ib', trees_2010$SP, trees_2010$DBH, trees_2010$HT)
trees_2010$TreeVol <- tempvol * trees_2010$EXPF
trees_2010 <- trees_2010 %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees_2010 <- trees_2010 %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
trees_2010 <- trees_2010 %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees_2010 <- trees_2010 %>%
mutate(
CCFL = CCF.Larger(ID, SP, DBH, EXPF)
)
trees_2010 <- trees_2010 %>%
group_by(ID) %>%
arrange(desc(HT), .by_group = TRUE)
trees_2010 <- trees_2010 %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
View(trees_2010)
maine_trees <- read_csv("maine_trees.csv")
setwd("~/Thesis/R Script/My Scripts/Packages/inventoryfunctions")
maine_trees <- read_csv("maine_trees.csv")
cord <- data.frame(maine_trees$X_Cord, maine_trees$Y_Cord)
cord <- cord %>% rename(x = maine_trees.X_Cord, y = maine_trees.Y_Cord)
coordinates(cord) <- cord
proj4string(cord) <- CRS("+proj=longlat +datum=WGS84")
library(elevatr)
