AEStandJoin <- dplyr::left_join(AEPlotJoin, AEStand, "PlotIndex")
AshlandEast <- AEStandJoin
rm(AETree, AEPlot, AEStand, AEPlotJoin, AEStandJoin)
# Ashland West
AWTree  <- AWTree %>% dplyr::select(PlotIndex, TRecIndex, SpeciesCode, SpeciesName, Dbh, CC03, CC04)
AWPlot  <- AWPlot %>% dplyr::select(PlotIndex)
AWStand <- AWStand %>% dplyr::select(PlotIndex, Stand)
AWPlotJoin  <- dplyr::left_join(AWTree, AWPlot, "PlotIndex")
AWStandJoin <- dplyr::left_join(AWPlotJoin, AWStand, "PlotIndex")
AshlandWest <- AWStandJoin
rm(AWTree, AWPlot, AWStand, AWPlotJoin, AWStandJoin)
Rangeley <- Rangeley %>% dplyr::mutate(
Region = "Rangeley"
)
AshlandEast <- AshlandEast %>% dplyr::mutate(
Region = "AshlandEast"
)
AshlandWest <- AshlandWest %>% dplyr::mutate(
Region = "AshlandWest"
)
# Rename Variables So They Match and Are Easier To Work With ------------------------
Rangeley <- Rangeley %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04, Stand = StandID)
AshlandEast <- AshlandEast %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04)
AshlandWest <- AshlandWest %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04)
# Join Regions
SevenIslands <- dplyr::bind_rows(Rangeley, AshlandEast, AshlandWest, .id = NULL)
rm(Rangeley, AshlandEast, AshlandWest)
# Convert to Metric -----------------------------------------------------
SevenIslands <- SevenIslands %>% dplyr::mutate(
DBH = DBH*2.54    ###### In. to Cm.
)
# Remove Regeneration Plots From Analysis (DBH < 10cm) ------------------------------------
SevenIslands <- SevenIslands %>% dplyr::filter(DBH >= 10)
11357 - 6468
# Clean Species Codes to Match FVS and Eliminate SpeciesName Variable --------
SevenIslands$SPP[SevenIslands$SpeciesName == "Hard Maple"] <- "SM"
SevenIslands$SPP[SevenIslands$SpeciesName == "White Birch"] <- "PB"
SevenIslands <- SevenIslands %>% dplyr::select(-SpeciesName)
SevenIslands <-SevenIslands %>% dplyr::relocate(Region, .before = Plot) %>%
dplyr::relocate(Stand, .after = Region)
View(SevenIslands)
TargetSpecies <- c("RM", "RO", "SM", "YB")
TargetSpecies <- c("RM", "RO", "SM", "YB")
SevenIslands <- SevenIslands %>% dplyr::filter(SPP %in% TargetSpecies)
6468 -1862
# Remove Tree Records with Missing Observations  ---------------------------
SevenIslands <- na.omit(SevenIslands)   ##### 45 Trees were missing Form/Risk Observations
1862 - 1815
View(FIA)
# Convert to Metric -----------------------------------------------------
FIA <- FIA %>% dplyr::mutate(
DBH = DBH*2.54    ###### In. to Cm.
)
View(FIA)
# Remove Regeneration Trees From Analysis (DBH < 10cm) ------------------------------------
SevenIslands <- SevenIslands %>% dplyr::filter(DBH >= 10)
# Remove Regeneration Trees From Analysis (DBH < 10cm) ------------------------------------
FIA <- FIA %>% dplyr::filter(DBH >= 10)
View(FIA)
View(SevenIslands)
View(FIA)
# Join Regions
AUCData <- dplyr::bind_rows(FIA, SevenIslands, .id = NULL)
1226 + 1815
View(AUCData)
rm(FIA, SevenIslands)
rm(TargetSpecies)
RangeleyTree <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Rangeley 2020 Clean/CSV/RangeleyTree.csv")
RangeleyPlot <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Rangeley 2020 Clean/CSV/RangeleyPlot.csv")
RangeleyStand <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Rangeley 2020 Clean/CSV/RangeleyStand.csv")
AETree <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland East 2020 Clean/CSV/AshlandEastTree.csv")
AEPlot <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland East 2020 Clean/CSV/AshlandEastPlot.csv")
AEStand <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland East 2020 Clean/CSV/AshlandEastStand.csv")
AWTree <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland West 2020 Clean/CSV/AshlandWestTree.csv")
AWPlot <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland West 2020 Clean/CSV/AshlandWestPlot.csv")
AWStand <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Ashland West 2020 Clean/CSV/AshlandWestStand.csv")
# Joins -------------------------------------------------
# Rangeley
RangeleyTree  <- RangeleyTree %>% dplyr::select(PlotIndex, TRecIndex, SpeciesCode, SpeciesName, Dbh, CC03, CC04)
RangeleyPlot  <- RangeleyPlot %>% dplyr::select(PlotIndex)
RangeleyStand <- RangeleyStand %>% dplyr::select(PlotIndex, StandID)
RangeleyPlotJoin  <- dplyr::left_join(RangeleyTree, RangeleyPlot, "PlotIndex")
RangeleyStandJoin <- dplyr::left_join(RangeleyPlotJoin, RangeleyStand, "PlotIndex")
Rangeley <- RangeleyStandJoin
rm(RangeleyTree, RangeleyPlot, RangeleyStand, RangeleyPlotJoin, RangeleyStandJoin)
# Ashland East
AETree  <- AETree %>% dplyr::select(PlotIndex, TRecIndex, SpeciesCode, SpeciesName, Dbh, CC03, CC04)
AEPlot  <- AEPlot %>% dplyr::select(PlotIndex)
AEStand <- AEStand %>% dplyr::select(PlotIndex, Stand)
AEPlotJoin  <- dplyr::left_join(AETree, AEPlot, "PlotIndex")
AEStandJoin <- dplyr::left_join(AEPlotJoin, AEStand, "PlotIndex")
AshlandEast <- AEStandJoin
rm(AETree, AEPlot, AEStand, AEPlotJoin, AEStandJoin)
# Ashland West
AWTree  <- AWTree %>% dplyr::select(PlotIndex, TRecIndex, SpeciesCode, SpeciesName, Dbh, CC03, CC04)
AWPlot  <- AWPlot %>% dplyr::select(PlotIndex)
AWStand <- AWStand %>% dplyr::select(PlotIndex, Stand)
AWPlotJoin  <- dplyr::left_join(AWTree, AWPlot, "PlotIndex")
AWStandJoin <- dplyr::left_join(AWPlotJoin, AWStand, "PlotIndex")
AshlandWest <- AWStandJoin
rm(AWTree, AWPlot, AWStand, AWPlotJoin, AWStandJoin)
Rangeley <- Rangeley %>% dplyr::mutate(
Region = "Rangeley"
)
AshlandEast <- AshlandEast %>% dplyr::mutate(
Region = "AshlandEast"
)
AshlandWest <- AshlandWest %>% dplyr::mutate(
Region = "AshlandWest"
)
# Rename Variables So They Match and Are Easier To Work With ------------------------
Rangeley <- Rangeley %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04, Stand = StandID)
AshlandEast <- AshlandEast %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04)
AshlandWest <- AshlandWest %>% dplyr::rename(Plot = PlotIndex, Tree = TRecIndex, SPP = SpeciesCode, DBH = Dbh,
Form = CC03, Risk = CC04)
# Join Regions
SevenIslands <- dplyr::bind_rows(Rangeley, AshlandEast, AshlandWest, .id = NULL)
rm(Rangeley, AshlandEast, AshlandWest)
# Convert to Metric -----------------------------------------------------
SevenIslands <- SevenIslands %>% dplyr::mutate(
DBH = DBH*2.54    ###### In. to Cm.
)
# Remove Regeneration Plots From Analysis (DBH < 10cm) ------------------------------------
SevenIslands <- SevenIslands %>% dplyr::filter(DBH >= 10)  ##### rm 4889 tree records
# Clean Species Codes to Match FVS and Eliminate SpeciesName Variable --------
SevenIslands$SPP[SevenIslands$SpeciesName == "Hard Maple"] <- "SM"
SevenIslands <- SevenIslands %>% dplyr::select(-SpeciesName)
SevenIslands <-SevenIslands %>% dplyr::relocate(Region, .before = Plot) %>%
dplyr::relocate(Stand, .after = Region)
TargetSpecies <- c("RM", "RO", "SM", "YB")
SevenIslands <- SevenIslands %>% dplyr::filter(SPP %in% TargetSpecies)  ##### rm 4606 tree records
rm(TargetSpecies)
# Remove Tree Records with Missing Observations  ---------------------------
SevenIslands <- na.omit(SevenIslands)   ##### 47 Trees were missing Form/Risk Observations
# Convert R1-4 to R1-2 ----------------------------------------------------
# R1, R2 = R1
# R3, R4 = R2
SevenIslands$Form <- forcats::as_factor(SevenIslands$Form)
is.factor(SevenIslands$Form)
# Convert R1-4 to LR, HR ----------------------------------------------------
# R1, R2 = LR (Low Risk)
# R3, R4 = HR (High Risk)
SevenIslands$Risk <- forcats::as_factor(SevenIslands$Risk)
?forcats::fct_c
a <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
as_factor(a)
a <- fct_collapse(a, LR = c(1,2), HR = c(3,4))
a <- as_factor(a)
a <- fct_collapse(a, LR = c(1,2), HR = c(3,4))
a <- fct_collapse(a, LR = c("1","2"), HR = c("3","4"))
a
SevenIslands$Risk <- fct_collapse(SevenIslands$Risk, LR = c("1","2"), HR = c("3","4"))
View(SevenIslands)
SevenIslands$Form <- forcats::fct_collapse(SevenIslands$Form,
IF = c("1"), AF = c("2","7"),
PF = c("3", "5", "6", "8"), UF = ("4")
)
View(SevenIslands)
View(AUCData)
AUCData %>% group_by(Region) %>% unique(Form)
AUCData %>% group_by(Region) %>% summarise(Form)
FIA <- AUCData %>% filter(Region = "FIA")
FIA <- AUCData %>% filter(Region == "FIA")
View(FIA)
as.factor(FIA$Form)
as_factor(FIA$Risk)
FIA$Form <- forcats::fct_collapse(FIA$Form,
IF = c("1"), AF = c("2"),
PF = c("3"), UF = ("4")
)
# Convert 1-4 Observations to IF, AF, PF, UF -----------------------------------
# 1 = IF (Ideal Form)
# 2 = AF (Acceptable Form)
# 3 = PF (Poor Form)
# 4 = UF (Unacceptable Form)
FIA$Form <- forcats::as_factor(FIA$Form)
FIA$Form <- forcats::fct_collapse(FIA$Form,
IF = c("1"), AF = c("2"),
PF = c("3"), UF = ("4")
)
# Convert R1-4 to LR, HR ----------------------------------------------------
# R1, R2 = LR (Low Risk)
# R3, R4 = HR (High Risk)
FIA$Risk <- forcats::as_factor(FIA$Risk)
FIA$Risk <- forcats::fct_collapse(FIA$Risk,
LR = c("1"), HR = c("2")
)
View(FIA)
fct_count(FIA$Risk)
fct_count(SevenIslands$Risk)
fct_count(FIA$Form)
fct_count(SevenIslands$Form)
source('~/Thesis/Analysis/AUC and Equivalence/AUC_Analysis.R', echo=TRUE)
View(AUCData)
fct_count(AUCData$Risk)
fct_count(AUCData$Form)
AUCData %>% AUCData %>% dplyr::filer(Risk != '6')
AUCData %>% AUCData %>% dplyr::filter(Risk != '6')
AUCData <- AUCData %>% dplyr::filter(Risk != '6')
View(AUCData)
hist(AUCData$DBH)
97/2.54
unique(AUCData$SPP)
fct_count(AUCData$Form)
fct_count(AUCData$Risk)
AUCData <- forcats::fct_drop(AUCData$Risk, only = "6")
AUCData$Risk <- forcats::fct_drop(AUCData$Risk, only = "6")
fct_count(AUCData)
source('~/Thesis/Analysis/AUC and Equivalence/AUC_Analysis.R', echo=TRUE)
setwd("~/Thesis/Analysis/AUC and Equivalence")
setwd("~/Thesis/Analysis/AUC and Equivalence")
readr::write_csv(AUCData, "AUCData.csv")
View(AUCData)
#Form Classification from Castle et al. (2017; CJFR 47: 1457-1467)
#Returns the probability of single straight stem (STM),
#extensive sweep and lean (LSW), multiple stems (MST),
#significant fork on first 5 m (LF)
form.prob=function(SPP,DBH)
{
if(SPP=='RO'){SPP.RO=1; SPP.SM=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='SM'){SPP.SM=1; SPP.RO=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='YB'){SPP.YB=1; SPP.RO=0; SPP.SM=0; SPP.RM=0}
else if(SPP=='RM'){SPP.RM=1; SPP.RO=0; SPP.SM=0; SPP.YB=0}
else{SPP.RO=0; SPP.SM=0; SPP.YB=0; SPP.RM=0}
STM=exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB)/(
1+exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB))
LSW=exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB)/(
1+exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB))
MST=exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB)/(1+
exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB))
LF=exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB)/(1+
exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB))
xx=1/(STM+LSW+MST+LF)
STM=STM*xx
LSW=LSW*xx
MST=MST*xx
LF=LF*xx
STM=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',STM,0)
LSW=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LSW,0)
MST=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',MST,0)
LF=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LF,0)
return(list(STM=STM,LSW=LSW,MST=MST,LF=LF))
}
Test <- mapply(form.prob, AUCData$SPP, AUCData$DBH)
View(Test)
test <- form.prob(AUCData$SPP, AUCData$DBH)
View(test)
test$STM
IF <- as.vector(test$STM)
#Form Classification from Castle et al. (2017; CJFR 47: 1457-1467)
#Returns the probability of single straight stem (STM),
#extensive sweep and lean (LSW), multiple stems (MST),
#significant fork on first 5 m (LF)
form.prob=function(SPP,DBH)
{
if(SPP=='RO'){SPP.RO=1; SPP.SM=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='SM'){SPP.SM=1; SPP.RO=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='YB'){SPP.YB=1; SPP.RO=0; SPP.SM=0; SPP.RM=0}
else if(SPP=='RM'){SPP.RM=1; SPP.RO=0; SPP.SM=0; SPP.YB=0}
else{SPP.RO=0; SPP.SM=0; SPP.YB=0; SPP.RM=0}
STM=exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB)/(
1+exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB))
LSW=exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB)/(
1+exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB))
MST=exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB)/(1+
exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB))
LF=exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB)/(1+
exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB))
xx=1/(STM+LSW+MST+LF)
STM=STM*xx
LSW=LSW*xx
MST=MST*xx
LF=LF*xx
STM=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',STM,0)
LSW=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LSW,0)
MST=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',MST,0)
LF=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LF,0)
return(list(STM=STM,LSW=LSW,MST=MST,LF=LF))
}
#Risk Classification from Castle et al. (2017; CJFR 47: 1457-1467)
#returns the probability of a tree being high risk
risk.prob=function(SPP,DBH)
{
if(SPP=='RO'){SPP.RO=1; SPP.SM=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='SM'){SPP.SM=1; SPP.RO=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='YB'){SPP.YB=1; SPP.RO=0; SPP.SM=0; SPP.RM=0}
else if(SPP=='RM'){SPP.RM=1; SPP.RO=0; SPP.SM=0; SPP.YB=0}
else{SPP.RO=0; SPP.SM=0; SPP.YB=0; SPP.RM=0}
HR=exp(-0.6886-0.0001*DBH-0.0184*SPP.RO-0.1513*SPP.SM-0.9851*SPP.YB
-0.0393*(DBH*SPP.RO)-0.0164*(DBH*SPP.SM)+0.0196*(DBH*SPP.YB))/(1+
exp(-0.6886-0.0001*DBH-0.0184*SPP.RO-0.1513*SPP.SM-0.9851*SPP.YB
-0.0393*(DBH*SPP.RO)-0.0164*(DBH*SPP.SM)+0.0196*(DBH*SPP.YB)))
HR=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',HR,0)
return(HR=HR)
}
Trees <- read_csv("AUCData.csv")
# Prediction Equations ----------------------------------------------------
#Form Classification from Castle et al. (2017; CJFR 47: 1457-1467)
#Returns the probability of single straight stem (STM),
#extensive sweep and lean (LSW), multiple stems (MST),
#significant fork on first 5 m (LF)
form.prob=function(SPP,DBH)
{
if(SPP=='RO'){SPP.RO=1; SPP.SM=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='SM'){SPP.SM=1; SPP.RO=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='YB'){SPP.YB=1; SPP.RO=0; SPP.SM=0; SPP.RM=0}
else if(SPP=='RM'){SPP.RM=1; SPP.RO=0; SPP.SM=0; SPP.YB=0}
else{SPP.RO=0; SPP.SM=0; SPP.YB=0; SPP.RM=0}
STM=exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB)/(
1+exp(-0.9491+0.0174*DBH-0.2826*SPP.RO+0.7541*SPP.SM-0.0208*SPP.YB))
LSW=exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB)/(
1+exp(-1.1143-0.0322*DBH+0.7910*SPP.RO-0.2325*SPP.SM+0.2980*SPP.YB))
MST=exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB)/(1+
exp(-0.4110-0.5009*SPP.RO-1.1347*SPP.RO-0.7557*SPP.YB))
LF=exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB)/(1+
exp(-4.0677+0.0322*DBH+0.1139*SPP.RO+0.6278*SPP.SM+1.0681*SPP.YB))
xx=1/(STM+LSW+MST+LF)
STM=STM*xx
LSW=LSW*xx
MST=MST*xx
LF=LF*xx
STM=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',STM,0)
LSW=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LSW,0)
MST=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',MST,0)
LF=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',LF,0)
return(list(STM=STM,LSW=LSW,MST=MST,LF=LF))
}
#Risk Classification from Castle et al. (2017; CJFR 47: 1457-1467)
#returns the probability of a tree being high risk
risk.prob=function(SPP,DBH)
{
if(SPP=='RO'){SPP.RO=1; SPP.SM=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='SM'){SPP.SM=1; SPP.RO=0; SPP.YB=0; SPP.RM=0}
else if(SPP=='YB'){SPP.YB=1; SPP.RO=0; SPP.SM=0; SPP.RM=0}
else if(SPP=='RM'){SPP.RM=1; SPP.RO=0; SPP.SM=0; SPP.YB=0}
else{SPP.RO=0; SPP.SM=0; SPP.YB=0; SPP.RM=0}
HR=exp(-0.6886-0.0001*DBH-0.0184*SPP.RO-0.1513*SPP.SM-0.9851*SPP.YB
-0.0393*(DBH*SPP.RO)-0.0164*(DBH*SPP.SM)+0.0196*(DBH*SPP.YB))/(1+
exp(-0.6886-0.0001*DBH-0.0184*SPP.RO-0.1513*SPP.SM-0.9851*SPP.YB
-0.0393*(DBH*SPP.RO)-0.0164*(DBH*SPP.SM)+0.0196*(DBH*SPP.YB)))
HR=ifelse(SPP=='RO' | SPP=='SM' | SPP=='RM' | SPP=='YB',HR,0)
return(HR=HR)
}
FormPredict <- form.prob(Trees$SPP, Trees$DBH)
View(FormPredict)
FormPredict <- mapply(form.prob, Trees$SPP, Trees$DBH)
View(FormPredict)
library(purrr)
f <- array_tree(FormPredict)
View(f)
f$STM
library(purrr)
FormPredict <- array_tree(FormPredict)
Trees$IF <- as.vector(FormPredict$STM)
View(Trees)
f <- array_tree(FormPredict)
FormPredict$STM[1]
FormPredict$STM[674]
Trees$IF <- round(Trees$IF, 2)
Trees$IF <- as.vector(as.numeric(FormPredict$STM))
Trees$IF <- round(Trees$IF, 2)
Trees$AF <- as.vector(as.numeric(FormPredict$LSW))
Trees$UF <- as.vector(as.numeric(FormPredict$LF))
Trees$IF <- round(Trees$IF, 2)
Trees$AF <- as.vector(as.numeric(FormPredict$LSW))
Trees$AF <- round(Trees$AF, 2)
Trees$PF <- as.vector(as.numeric(FormPredict$MST))
Trees$PF <- round(Trees$PF, 2)
Trees$UF <- as.vector(as.numeric(FormPredict$LF))
Trees$UF <- round(Trees$UF, 2)
View(Trees)
rm(FormPredict)
rm(f)
# Risk
RiskPredict <- mapply(risk.prob, Trees$SPP, Trees$DBH)
Trees$RiskPredict <- ifelse(RiskPredict > .5, HR, LR)
Trees$RiskPredict <- ifelse(RiskPredict > .5, "HR", "LR")
Trees$test <- RiskPredict
View(Trees)
Trees$PredictNum <- with(Trees, pmax(IF, AF, PF, UF))
View(Trees)
View(Trees)
Trees$FormPredict <- ifelse(Trees$PredictNum == Trees$IF, "IF", ifelse(Trees$PredictNum == Trees$AF, "AF",
ifelse(Trees$PredictNum == Trees$PF, "PF", ifelse(Trees$PredictNum == Trees$UF, "UF", 0))))
View(Trees)
Trees <- Trees %>% dplyr::select(-c(IF, AF, PF, UF, PredictNum))
View(Trees)
Trees <- Trees %>% dplyr::select(-c(test))
View(Trees)
Trees <- Trees %>% dplyr::relocate(FormPredict, .after = Form)
View(Trees)
readr::write_csv("Predictions.csv")
readr::write_csv(Trees, "Predictions.csv")
View(Trees)
data("tree_data")
trees <- tree_data
rm(tree_data)
library(inventoryfunctions)
data("tree_data")
trees <- tree_data
rm(tree_data)
View(trees)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("EastSI_ENSEMBLE_rcp60_2030.tif")
View(trees)
View(trees)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
### BAL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### BAL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
### Height ###
trees$HT <-  HeightPredict(trees$Stand, trees$Plot, trees$SPP, trees$DBH, trees$CSI,
trees$CCF, trees$BAL, trees$HT)
### Volume Output (Tree Vol * EXPF)
trees$Vol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$VolPerHctr <- trees$Vol * trees$EXPF
### CCFL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
### 100 Tallest Trees
trees$Tallest <- TallestTrees(trees$ID, trees$HT, trees$EXPF)
MeanVolPerAcreBySpecies <- trees %>% group_by(Stand, SPP) %>%
summarize(mean(VolPerHctr)*35.315/2.47105) %>% rename(VolPerAcre = `mean(VolPerHctr) * 35.315/2.47105`)
View(MeanVolPerAcreBySpecies)
View(trees)
MeanVolPerAcreByStand <- trees %>% group_by(Stand) %>%
summarize(mean(VolPerHctr)*35.315/2.47105) %>% rename(VolPerAcre = `mean(VolPerHctr) * 35.315/2.47105`)
View(MeanVolPerAcreByStand)
View(MeanVolPerAcreByStand)
MeanVolPerAcreByStand <- trees %>% group_by(Stand) %>%
summarize(mean(VolPerHctr)*35.315/2.47105) %>% rename(VolPerAcre = `mean(VolPerHctr) * 35.315/2.47105`)
View(MeanVolPerAcreByStand)
View(MeanVolPerAcreByStand)
MeanVolPerAcreByStand <- MeanVolPerAcreByStand %>% mutate(StandVolume = VolPerAcre*60)
View(MeanVolPerAcreBySpecies)
View(MeanVolPerAcreByStand)
View(trees)
MeanNumTPA <- Trees %>% group_by(Stand) %>% summarise(mean(TPH)/2.47105)
MeanNumTPA <- trees %>% group_by(Stand) %>% summarise(mean(TPH)/2.47105)
MeanNumTPA <- trees %>% group_by(Stand) %>% summarise(mean(TPH)/2.47105)
View(MeanNumTPA)
View(MeanNumTPA)
MeanNumTPA <- trees %>% group_by(SPP) %>% summarise(mean(TPH)/2.47105)
View(MeanNumTPA)
MeanNumTPA <- trees %>% group_by(Stand, SPP) %>% summarise(mean(TPH)/2.47105)
View(MeanNumTPA)
View(trees)
MeanBAPA_by_Species <- trees %>% group_by(Stand, SPP) %>% summarize(mean(EXPF)*10.764/2.47105) %>% rename(BAPA = `mean(EXPF) * 10.764/2.47105`)
View(MeanBAPA_by_Species)
View(trees)
View(trees)
