} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
TallestTrees <- function(ID, HT, EXPF){
Temp <- data.frame(ID, HT, EXPF)
Temp <- Temp[order(-HT),]
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)
for (i in 1:length(Temp$csum)){
if(Temp$csum[i] <= 100){
Temp$X[i] = Temp$HT[i] * Temp$EXPF[i]
Temp$Counts[i] = Temp$csum[i]
} else {
Temp$X[i] = 0
Temp$Counts[i] = 0
}
}
if(Temp$Counts >= 100){
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))  # Number of trees not included in X
Temp$minheight <- ave(Temp$Counts, Temp$ID, FUN = function(x) Temp$HT[1 + which.max(x)]) # Height of tree not included in X
for (i in 1:length(Temp$remainder)){    # Create column with total combined heights of trees that were missing from column x
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE)) #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                        # Create column with combined heights of 100 tallest trees
}
Temp$Result <- ave(Temp$Total, Temp$ID, FUN = function(x) x/100)       # Divide the combined height of 100 tallest trees by 100.
round(Temp$Result, 2)
} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
devtools::document()
library(roxygen2)
library(devtools)
document()
library(inventoryfunctions)
library(devtools)
library(roxygen2)
document()
document()
library(inventoryfunctions)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in 1:length(Temp$BAF.Area)){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X <- round(Temp$X, 2)
return(X)
}
}
data("tree_data")
trees <- tree_data
rm(tree_data)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF)
)
View(trees)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in 1:length(Temp$BAF.Area)){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X[i] <- round(Temp$X[i], 2)
return(X[i])
}
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF1 = EXP.F(DBH, BAF)
)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in 1:length(Temp$BAF.Area)){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X <- round(Temp$X[i], 2)
return(X)
}
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF1 = EXP.F(DBH, BAF)
)
View(trees)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in Temp$BAF.Area){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X <- round(Temp$X[i], 2)
return(X)
}
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF2 = EXP.F(DBH, BAF)
)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in Temp$BAF.Area){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X <- round(Temp$X, 2)
return(X)
}
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF2 = EXP.F(DBH, BAF)
)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
for (i in seq_along(Temp$BAF.Area)){
if (Temp$BAF.Area[i] <= 1){
Temp$X[i] <- 1/Temp$BAF.Area[i]
} else {
Temp$X[i] <- (Temp$BAF.Area[i]) / (0.00007854 * (Temp$DBH[i]^2))
}
X <- round(Temp$X, 2)
return(X)
}
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF2 = EXP.F(DBH, BAF)
)
View(trees)
EXP.F <- function(DBH, BAF.Area) {
Temp <- data.frame(DBH, BAF.Area)
if (Temp$BAF.Area <= 1){
Temp$X <- 1/Temp$BAF.Area
} else {
Temp$X <- (Temp$BAF.Area) / (0.00007854 * (Temp$DBH^2))
}
X <- round(Temp$X, 2)
return(X)
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF2 = EXP.F(DBH, BAF)
)
View(trees)
EXP.F <- function(DBH, BAF.Area) {
X <- ifelse(BAF.Area <= 1, 1/BAF.Area, (BAF.Area)/(0.00007854 * (DBH^2)))
return(X)
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF3 = EXP.F(DBH, BAF)
)
View(trees)
EXP.F <- function(DBH, BAF.Area) {
X <- ifelse(BAF.Area <= 1, 1/BAF.Area, (BAF.Area)/(0.00007854 * (DBH^2)))
return(X)
}
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF4 = EXP.F(DBH, BAF)
)
View(trees)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
### BAL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
### Volume Output (Tree Vol * EXPF)
tempvol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$TreeVol <- tempvol * trees$EXPF
rm(tempvol)
### CCFL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
### 100 Tallest Trees
trees$Tallest <- TallestTrees(trees$ID, trees$HT, trees$EXPF)
View(trees)
document()
document
document()
library(inventoryfunctions)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
### BAL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT1 <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot)
View(trees)
test <- trees %>% filter(HT > 0) %>% select(HT, HT1)
View(test)
Bias(test$HT1, test$HT)
### Height ###
trees$HT2 <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
test <- trees %>% filter(HT > 0) %>% select(HT, HT2)
View(test)
test <- trees %>% filter(HT > 0) %>% select(HT, HT1, HT2)
Bias(test$HT1, test$HT2)
TallestTrees <- function(ID, HT, EXPF){
NULL <- leftover <- Total <- Result
Temp <- data.frame(ID, HT, EXPF)                    # Make Dataframe
Temp <- Temp[order(-HT),]                           # Order it for Cumsum function
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)    # Cumsum each ID (Plot or Stand)
for (i in 1:length(Temp$csum)){
if(Temp$csum[i] <= 100){
Temp$X[i] <- Temp$HT[i] * Temp$EXPF[i]          # Get a total sum of heights for trees where cumsum <= 100
Temp$Counts[i] <- Temp$csum[i]                  # Identify which trees are included in that sum
} else {
Temp$X[i] <- 0                                  # Identify which trees are not included in that sum
Temp$Counts[i] <- 0
}
}
Temp$MaxCum <- ave(Temp$csum, Temp$ID, FUN = function(x) 100 - max(x))                    # 100-MaxCum == the number of trees in plots where cumsum < 100
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))   # Identify number of trees needed for X to get to 100
Temp$max <- ave(Temp$Counts, Temp$ID, FUN = function(x) which.max(x))                     # Index for max tree if first tree has EXPF > 100
Temp$index <- ave(Temp$Counts, Temp$ID, FUN = function(x) which.max(x) + 1)               # Index of the first tree not included in X
Temp <- Temp %>%                                                                          # Identify the height of the remainder trees
dplyr::group_by(ID) %>%
dplyr::arrange(desc(HT), .by_group = TRUE) %>%
dplyr::mutate(
minheight = HT[index]
)
Temp <- Temp %>%                                                                          # Identify the top tree when expf of first tree > 100
dplyr::group_by(ID) %>%
dplyr::arrange(desc(HT), .by_group = TRUE) %>%
dplyr::mutate(
maxht = HT[max]
)
for(i in 1:length(Temp$minheight)){                                     # Get rid of NAs for plots with less than 100 stems
if(is.na(Temp$minheight[i]) == TRUE){
Temp$minheight[i] <- 0
} else {
Temp$minheight[i] <- Temp$minheight[i]
}
}
for (i in 1:length(Temp$remainder)){                                    # Create column with total combined heights of remainder trees
if(Temp$remainder[i] < 100){
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
} else {
Temp$leftover[i] <- Temp$remainder[i] * Temp$maxht[i]                 # Sum of 100*MaxTree if Tallest tree has EXPF > 100
}
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE))  #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                         # Create column with combined heights of 100 tallest trees
}
for (i in 1:length(Temp$Total)){
if(Temp$MaxCum[i] > 0){
Temp$Result[i] <- Temp$Total[i]/(100-Temp$MaxCum[i])                # If there are less than 100 trees divide by the # of trees.
} else {
Temp$Result[i] <- Temp$Total[i]/100                                 # If there are > 100 trees, combined height of 100 tallest trees / 100.
}
}
as.numeric(round(Temp$Result, 2))                                                 # Round return.
return(Temp$Result)                                                     # Result returned
}
View(test)
View(trees)
View(test)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
### Tree and Plot Level Data ###
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF),
QMD = QMD(BAPH, TPH)
)
### BAL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
### Volume Output (Tree Vol * EXPF)
tempvol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$TreeVol <- tempvol * trees$EXPF
rm(tempvol)
### CCFL Values
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
### 100 Tallest Trees
trees$Tallest <- TallestTrees(trees$ID, trees$HT, trees$EXPF)
### 100 Tallest Trees
trees$Tallest <- TallestTrees(trees$ID, trees$HT, trees$EXPF)
TallestTrees <- function(ID, HT, EXPF){
leftover <- Total <- Result <- NULL
Temp <- data.frame(ID, HT, EXPF)                    # Make Dataframe
Temp <- Temp[order(-HT),]                           # Order it for Cumsum function
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)    # Cumsum each ID (Plot or Stand)
for (i in 1:length(Temp$csum)){
if(Temp$csum[i] <= 100){
Temp$X[i] <- Temp$HT[i] * Temp$EXPF[i]          # Get a total sum of heights for trees where cumsum <= 100
Temp$Counts[i] <- Temp$csum[i]                  # Identify which trees are included in that sum
} else {
Temp$X[i] <- 0                                  # Identify which trees are not included in that sum
Temp$Counts[i] <- 0
}
}
Temp$MaxCum <- ave(Temp$csum, Temp$ID, FUN = function(x) 100 - max(x))                    # 100-MaxCum == the number of trees in plots where cumsum < 100
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))   # Identify number of trees needed for X to get to 100
Temp$max <- ave(Temp$Counts, Temp$ID, FUN = function(x) which.max(x))                     # Index for max tree if first tree has EXPF > 100
Temp$index <- ave(Temp$Counts, Temp$ID, FUN = function(x) which.max(x) + 1)               # Index of the first tree not included in X
Temp <- Temp %>%                                                                          # Identify the height of the remainder trees
dplyr::group_by(ID) %>%
dplyr::arrange(desc(HT), .by_group = TRUE) %>%
dplyr::mutate(
minheight = HT[index]
)
Temp <- Temp %>%                                                                          # Identify the top tree when expf of first tree > 100
dplyr::group_by(ID) %>%
dplyr::arrange(desc(HT), .by_group = TRUE) %>%
dplyr::mutate(
maxht = HT[max]
)
for(i in 1:length(Temp$minheight)){                                     # Get rid of NAs for plots with less than 100 stems
if(is.na(Temp$minheight[i]) == TRUE){
Temp$minheight[i] <- 0
} else {
Temp$minheight[i] <- Temp$minheight[i]
}
}
for (i in 1:length(Temp$remainder)){                                    # Create column with total combined heights of remainder trees
if(Temp$remainder[i] < 100){
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
} else {
Temp$leftover[i] <- Temp$remainder[i] * Temp$maxht[i]                 # Sum of 100*MaxTree if Tallest tree has EXPF > 100
}
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE))  #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                         # Create column with combined heights of 100 tallest trees
}
for (i in 1:length(Temp$Total)){
if(Temp$MaxCum[i] > 0){
Temp$Result[i] <- Temp$Total[i]/(100-Temp$MaxCum[i])                # If there are less than 100 trees divide by the # of trees.
} else {
Temp$Result[i] <- Temp$Total[i]/100                                 # If there are > 100 trees, combined height of 100 tallest trees / 100.
}
}
as.numeric(round(Temp$Result, 2))                                                 # Round return.
return(Temp$Result)                                                     # Result returned
}
### 100 Tallest Trees
trees$Tallest <- TallestTrees(trees$ID, trees$HT, trees$EXPF)
View(trees)
devtools::document()
library(devtools)
library(roxygen2)
document()
library(inventoryfunctions)
build()
