# Fix NaN problems in Values ----------------------------------------------
fix_nan <- function(x) {
x[is.nan(x)] <- 0
x
}
cull.vol <- fix_nan(cull.vol)
saw.vol <- fix_nan(saw.vol)
pulp.vol <- fix_nan(pulp.vol)
saw.bf <- fix_nan(saw.bf)
# Total Merch Data For Tree By Section ------------------------------------
merch.data <- data.frame(Low.Diam.Inch, Top.Diam.Inch, Section.Length, Sections, saw.bf, saw.vol, pulp.vol, cull.vol) # Full Tree Data Frame
# Create Sum of Total Values For Tree -------------------------------------
if (Cull == TRUE){
Saw.BF.SC <- 0
Saw.Vol.SC <- 0
Pulp.Vol.SC <- 0
Cull.Vol.SC <- round(sum(saw.vol, pulp.vol, cull.vol), 4)
} else {
Saw.BF.SC <- round(sum(saw.bf), 4)
Saw.Vol.SC <- round(sum(saw.vol), 4)
Pulp.Vol.SC <- round(sum(pulp.vol), 4)
Cull.Vol.SC <- round(sum(cull.vol), 4)
}
Total.Vol <- KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .5, topHT = NA, topD = NA) * 35.3147
Total.Vol <- round(Total.Vol, 4)
Merch.Vol <- KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .5, topHT = NA, topD = pd) * 35.3147
Merch.Vol <- round(Merch.Vol, 4)
Stand <- Stand
Plot <- Plot
Tree <- Tree
Percent.Sawlog.SC <- round((Saw.Vol.SC / Merch.Vol) * 100, 2)
Method <- "Stick.Cruise"
# Return Values -----------------------------------------------------------
values <- data.frame(Stand, Plot, Tree, Method, SPP, Saw.BF.SC, Saw.Vol.SC, Pulp.Vol.SC, Cull.Vol.SC, Total.Vol, Merch.Vol, Percent.Sawlog.SC)
return(values)
}
Stick.Cruise.Tree <- function(Stand, Plot, Tree, SPP, DBH, HT, Cull = FALSE, S1 = "Pulp", S2 = "Pulp", S3 = "Pulp", S4 = "Pulp",
S5 = "Pulp", S6 = "Pulp", S7 = "Pulp", S8 = "Pulp", S9 = "Pulp",
S10 = "Pulp", S11 = "Pulp", S12 = "Pulp", S13 = "Pulp", S14 = "Pulp",
S15 = "Pulp", S16 = "Pulp", S17 = "Pulp", S18 = "Pulp", S19 = "Pulp", S20 = "Pulp") {
# Merchantable Diameter For Species ---------------------------------------
aa <- sapply(SPP, merc)
sd <- as.numeric(t(aa)[, 1]) # Saw Diameter
pald <- as.numeric(t(aa)[, 2]) # Pallet Diameter
pd <- as.numeric(t(aa)[, 3]) # Pulp Diameter
# Stump Height of .5 Meters (1.64 ft) - 8 Foot Sections
eight.ft <- seq(.5, 100, 2.4384)
if (HT > eight.ft[2]) {
d1 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[2], DBH, HT, Planted = 0)
} else {
d1 <- 0
}
if (HT > eight.ft[3]) {
d2 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[3], DBH, HT, Planted = 0)
} else {
d2 <- 0
}
if (HT > eight.ft[4]) {
d3 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[4], DBH, HT, Planted = 0)
} else {
d3 <- 0
}
if (HT > eight.ft[5]) {
d4 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[5], DBH, HT, Planted = 0)
} else {
d4 <- 0
}
if (HT > eight.ft[6]) {
d5 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[6], DBH, HT, Planted = 0)
} else {
d5 <- 0
}
if (HT > eight.ft[7]) {
d6 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[7], DBH, HT, Planted = 0)
} else {
d6 <- 0
}
if (HT > eight.ft[8]) {
d7 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[8], DBH, HT, Planted = 0)
} else {
d7 <- 0
}
if (HT > eight.ft[9]) {
d8 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[9], DBH, HT, Planted = 0)
} else {
d8 <- 0
}
if (HT > eight.ft[10]) {
d9 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[10], DBH, HT, Planted = 0)
} else {
d9 <- 0
}
if (HT > eight.ft[11]) {
d10 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[11], DBH, HT, Planted = 0)
} else {
d10 <- 0
}
if (HT > eight.ft[12]) {
d11 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[12], DBH, HT, Planted = 0)
} else {
d11 <- 0
}
if (HT > eight.ft[13]) {
d12 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[13], DBH, HT, Planted = 0)
} else {
d12 <- 0
}
if (HT > eight.ft[14]) {
d13 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[14], DBH, HT, Planted = 0)
} else {
d13 <- 0
}
if (HT > eight.ft[15]) {
d14 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[15], DBH, HT, Planted = 0)
} else {
d14 <- 0
}
if (HT > eight.ft[16]) {
d15 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[16], DBH, HT, Planted = 0)
} else {
d15 <- 0
}
if (HT > eight.ft[17]) {
d16 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[17], DBH, HT, Planted = 0)
} else {
d16 <- 0
}
if (HT > eight.ft[18]) {
d17 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[18], DBH, HT, Planted = 0)
} else {
d17 <- 0
}
if (HT > eight.ft[19]) {
d18 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[19], DBH, HT, Planted = 0)
} else {
d18 <- 0
}
if (HT > eight.ft[20]) {
d19 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[20], DBH, HT, Planted = 0)
} else {
d19 <- 0
}
if (HT > eight.ft[21]) {
d20 <- KozakTaper(Bark = "ib", SPP, DHT = eight.ft[21], DBH, HT, Planted = 0)
} else {
d20 <- 0
}
# Create List of Top Diameter of Each Section
TopDiam.List <- c(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20)
# Create List of Lower Diameter of Each Section
stump.diam <- KozakTaper(Bark = "ib", SPP, DHT = .5, DBH, HT, Planted = 0)
LowDiam.List <- lag(TopDiam.List, default = stump.diam)
# Create list of Section Calls (Saw, Pulp, Cull)
Sections <- c(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20)
# International 1/4in Rule for Board Feet ---------------------------------
board.feet <- function(TopDiam) {
a <- 0.049621
b <- 0.00622
c <- 0.185476
d <- 0.000259
e <- 0.011592
f <- 0.04222
len <- 8
inches <- 0.3937008
(a * (len * (inches * TopDiam)^2)) + (b * (len^2 * (inches * TopDiam))) - (c * (len * TopDiam * inches)) +
(d * len^3) - (e * len^2) + (f * len)
}
# Mechanize Sawlogs BF ---------------------------------------------------
merchandize.saw.bf <- function(TopDiam.List, Sections) {
if (Sections == "Saw" && TopDiam.List >= sd) {
saw.bf <- board.feet(TopDiam.List)
saw.bf <- round(saw.bf, 4)
} else {
saw.bf <- 0
}
}
# Merchandize Saw Vol --------------------------------------------------------
merchandize.saw.vol <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Saw" && TopDiam.List >= sd) {
saw.vol <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else {
saw.vol <- 0
}
}
# Merchandize Pulp Vol--------------------------------------------------------
merchandize.pulp <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Pulp" && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else if (Sections == "Saw" && TopDiam.List < sd && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else {
pulp <- 0
}
}
# Cull Vol ----------------------------------------------------------------
merchandize.cull <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Cull") {
cull <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else if (Sections == "Saw" && TopDiam.List < pd) {
cull <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else if (Sections == "Pulp" && TopDiam.List < pd) {
cull <- ((KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = NA, topHT = NA, topD = LowDiam.List))) * 35.3147
} else {
cull <- 0
}
}
# Create Merch Value Vectors ----------------------------------------------
saw.bf <- mapply(merchandize.saw.bf, TopDiam.List, Sections)
saw.vol <- mapply(merchandize.saw.vol, TopDiam.List, LowDiam.List, Sections)
pulp.vol <- mapply(merchandize.pulp, TopDiam.List, LowDiam.List, Sections)
cull.vol <- mapply(merchandize.cull, TopDiam.List, LowDiam.List, Sections)
Section.Length <- rep(8, len = length(cull.vol))
Low.Diam.Inch <- round(LowDiam.List * 0.393701, 2)
Top.Diam.Inch <- round(TopDiam.List * 0.393701, 2)
saw.bf <- round(saw.bf, 4)
pulp.vol <- round(pulp.vol, 4)
cull.vol <- round(cull.vol, 4)
saw.vol <- round(saw.vol, 4)
# Fix NaN problems in Values ----------------------------------------------
fix_nan <- function(x) {
x[is.nan(x)] <- 0
x
}
cull.vol <- fix_nan(cull.vol)
saw.vol <- fix_nan(saw.vol)
pulp.vol <- fix_nan(pulp.vol)
saw.bf <- fix_nan(saw.bf)
# Total Merch Data For Tree By Section ------------------------------------
merch.data <- data.frame(Low.Diam.Inch, Top.Diam.Inch, Section.Length, Sections, saw.bf, saw.vol, pulp.vol, cull.vol) # Full Tree Data Frame
# Create Sum of Total Values For Tree -------------------------------------
if (Cull == TRUE){
Saw.BF.SC <- 0
Saw.Vol.SC <- 0
Pulp.Vol.SC <- 0
Cull.Vol.SC <- round(sum(saw.vol, pulp.vol, cull.vol), 4)
} else {
Saw.BF.SC <- round(sum(saw.bf), 4)
Saw.Vol.SC <- round(sum(saw.vol), 4)
Pulp.Vol.SC <- round(sum(pulp.vol), 4)
Cull.Vol.SC <- round(sum(cull.vol), 4)
}
Total.Vol <- KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .5, topHT = NA, topD = NA) * 35.3147
Total.Vol <- round(Total.Vol, 4)
Merch.Vol <- KozakTreeVol(Bark = "ib", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .5, topHT = NA, topD = pd) * 35.3147
Merch.Vol <- round(Merch.Vol, 4)
Stand <- Stand
Plot <- Plot
Tree <- Tree
Percent.Sawlog.SC <- round((Saw.Vol.SC / Merch.Vol) * 100, 2)
Method <- "Stick.Cruise"
# Return Values -----------------------------------------------------------
values <- data.frame(Stand, Plot, Tree, Method, SPP, Saw.BF.SC, Saw.Vol.SC, Pulp.Vol.SC, Cull.Vol.SC, Total.Vol, Merch.Vol, Percent.Sawlog.SC)
return(values)
}
Stick.Cruise.Tree(1, 1, 1, 'RO', 30, 16, FALSE, 'Saw', 'Pulp', 'Saw')
Stick.Cruise.Tree(1, 1, 1, 'RO', 30, 16, TRUE, 'Saw', 'Pulp', 'Saw')
Stick.Cruise.Tree(1, 1, 1, 'RO', 30, 16, FALSE)
Stick.Cruise.Tree(1, 1, 1, 'RO', 30, 16, TRUE)
document()
document()
library(inventoryfunctions)
Stick.Cruise.Tree(1, 1, 1, "RO", 40, 15, FALSE, "Saw")
Stick.Cruise.Tree(1, 1, 1, "RO", 40, 15, FALSE, "Pulp", "Saw")
library(devtools)
library(roxygen2)
document()
library(inventoryfunctions)
library(inventoryfunctions)
library(inventoryfunctions)
library(devtools)
build()
remove.packages("inventoryfunctions")
install()
install.packages("~/Thesis/R Script/My Scripts/Packages/inventoryfunctions_0.0.1.tar.gz", repos = NULL, type = "source")
library(devtools)
library(roxygen2)
document()
library(inventoryfunctions)
BA(16)
.25
1/.25
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Fixed < 1){
exp.f <- 1/BAF.Fixed
} else {
exp.f <- (BAF) / (0.005454 * (DBH^2))
return(exp.f)
}
}
EXP.F(14, .2)
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Fixed < 1){
exp.f <- 1/BAF.Area
} else {
exp.f <- (BAF) / (0.005454 * (DBH^2))
return(exp.f)
}
}
EXP.F(14, .2)
if (BAF.Area < 1){
exp.f <- 1/BAF.Area
} else {
exp.f <- (BAF) / (0.005454 * (DBH^2))
return(exp.f)
}
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Area < 1){
exp.f <- 1/BAF.Area
} else {
exp.f <- (BAF) / (0.005454 * (DBH^2))
return(exp.f)
}
}
EXP.F(14, .25)
EXP.F(14, .2)
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Area < 1){
EXP.F <- 1/BAF.Area
} else {
EXP.F <- (BAF) / (0.005454 * (DBH^2))
return(c(EXP.F))
}
}
EXP.F(14, 20)
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Area < 1){
EXP.F <- 1/BAF.Area
} else {
EXP.F <- (BAF.Area) / (0.005454 * (DBH^2))
return(c(EXP.F))
}
}
EXP.F(14, 20)
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Area < 1){
EXP.F <- 1/BAF.Area
} else {
EXP.F <- (BAF.Area) / (0.005454 * (DBH^2))
}
return(EXP.F)
}
EXP.F(14,.2)
EXP.F(14,20)
EXP.F <- function(DBH, BAF.Area) {
if (BAF.Area <= 1){
EXP.F <- 1/BAF.Area
} else {
EXP.F <- (BAF.Area) / (0.005454 * (DBH^2))
}
return(EXP.F)
}
EXP.F(14, 1)
EXP.F(14, 1.1)
document()
document()
library(inventoryfunctions)
document()
document()
document()
library(inventoryfunctions)
document()
document()
library(inventoryfunctions)
document()
document()
document()
library(inventoryfunctions)
document()
document()
document()
document
document()
document()
library(inventoryfunctions)
document()
library(inventoryfunctions)
build()
#Species function
SPP.func=function(SPP)
{
SPcodes = c(
'AB',  # AB=American beech
'AS',  # AS=ash
'BA',  # BA=black ash
'BC',  # BC=black cherry
'BF',  # BF=balsam fir
'BP',  # BP=balsam poplar
'BS',  # BS=black spruce
'BT',  # BT=bigtooth aspen
'EC',  # EC=eastern cottonwood
'EH',  # EH=eastern hemlock
'GA',  # GA=green ash
'GB',  # GB=gray birch
'HH',  # HH=eastern hophornbeam
'JP',  # JP=jack pine
'NS',  # NS=Norway spruce
'OH',  # OH=other hardwoods
'OS',  # OS=other softwoods
'PB',  # PB=paper birch
'PC',  # PC=pin cherry
'PR',  # PR=pin cherry
'QA',  # QA=quaking aspen
'RB',  # RB=river birch
'RM',  # RM=red maple
'RP',  # RP=red pine
'RN',  # RN=red pine
'RO',  # RO=red oak
'RS',  # RS=red spruce
'SB',  # SB=Sweet birch
'SM',  # SM=sugar maple
'ST',  # ST=striped maple
'TA',  # TA=larch/tamarack
'WA',  # WA=white ash
'WC',  # WC=northern white cedar
'WP',  # WP=white pine
'WS',  # WS=white spruce
'YB',  # YB=yellow birch
'99')  # other
SPtype = c(
'HW', # AB=American beech
'HW', # AS=ash
'HW', # BA=black ash
'HW', # BC=black cherry
'SW', # BF=balsam fir
'HW', # BP=balsam poplar
'SW', # BS=black spruce
'HW', # BT=bigtooth aspen
'HW', # EC=eastern cottonwood
'SW', # EH=eastern hemlock
'HW', # GA=green ash
'HW', # GB=gray birch
'HW', # HH=eastern hophornbeam
'SW', # JP=jack pine
'SW', # NS=Norway spruce
'HW', # OH=other hardwoods
'SW', # OS=other softwoods
'SW', # PB=paper birch
'HW', # PC=pin cherry
'HW', # PR=pin cherry
'HW', # QA=quaking aspen
'HW', # RB=river birch
'HW', # RM=red maple
'SW', # RP=red pine
'SW', # RN=red pine
'HW', # RO=red oak
'SW', # RS=red spruce
'HW', # SB=Sweet birch
'HW', # SM=sugar maple
'HW', # ST=striped maple
'SW', # TA=larch/tamarack
'HW', # WA=white ash
'SW', # WC=northern white cedar
'SW', # WP=white pine
'SW', # WS=white spruce
'HW', # YB=yellow birch
'HW') # other
attrs = matrix (c(
# sg      wd     shade drought  waterlog
0.64  ,0.56   , 4.75 , 1.5  , 1.5 ,    # AB=American beech
0.57  ,0.51   , 2.84 , 2.74 , 3.02,    # AS=ash
0.5   ,0.45   , 2.96 , 2    , 3.5 ,    # BA=black ash
0.5   ,0.47   , 2.46 , 3.02 , 1.06,    # BC=black cherry
0.35  ,0.33   , 5.01 , 1    , 2   ,    # BF=balsam fir
0.34  ,0.31   , 1.27 , 1.77 , 2.63,    # BP=balsam poplar
0.46  ,0.38   , 4.08 , 2.0  , 2.0 ,    # BS=black spruce
0.39  ,0.36   , 1.21 , 2.5  , 2   ,    # BT=bigtooth aspen
0.4   ,0.37   , 1.76 , 1.57 , 3.03,    # EC=eastern cottonwood
0.4   ,0.38   , 4.83 , 1    , 1.25,    # EH=eastern hemlock
0.56  ,0.53   , 3.11 , 3.85 , 2.98,    # GA=green ash
0.48  ,0.45   , 1.5  , 2.34 , 1   ,    # GB=gray birch
0.78  ,0.63   , 4.58 , 3.25 , 1.07,    # HH=eastern hophornbeam
0.43  ,0.4    , 1.36 , 4    , 1   ,    # JP=jack pine
0.43  ,0.37023, 4.45 , 1.75 , 1.22,    # NS=Norway spruce
0.5121,0      , 2.29 ,  0   , 0   ,    # OH=other hardwoods
0.445 ,0      , 2.27 , 0    , 0   ,    # OS=other softwoods
0.55  ,0.48   , 1.54 , 2.02 , 1.25,    # PB=paper birch
0.38  ,0.36   , 2.26 , 0    , 0   ,    # PC=pin cherry
0.38  ,0.36   , 2.26 , 0    , 0   ,    # PR=pin cherry
0.38  ,0.35   , 1.21 , 1.77 , 1.77,    # QA=quaking aspen
0.62  ,0.49   , 1.45 , 1.53 , 2.85,    # RB=river birch
0.54  ,0.49   , 3.44 , 1.84 , 3.08,    # RM=red maple
0.46  ,0.41   , 1.89 , 3    , 1   ,    # RP=red pine
0.46  ,0.41   , 1.89 , 3    , 1   ,    # RN=red pine
0.63  ,0.56   , 2.75 , 2.88 , 1.12,    # RO=red oak
0.4   ,0.37   , 4.39 , 2.5  , 2   ,    # RS=red spruce
0.65  ,0.6    , 2.58 , 3    , 1   ,    # SB=Sweet birch
0.63  ,0.56   , 4.76 , 2.25 , 1.09,    # SM=sugar maple
0.46  ,0.44   , 3.56 , 2    , 1   ,    # ST=striped maple
0.53  ,0.49   , 0.98 , 2    , 3   ,    # TA=larch/tamarack
0.6   ,0.55   , 2.46 , 2.38 , 2.59,    # WA=white ash
0.31  ,0.29   , 3.45 , 2.71 , 1.46,    # WC=northern white cedar
0.35  ,0.34   , 3.21 , 2.29 , 1.03,    # WP=white pine
0.4   ,0.33   , 4.15 , 2.88 , 1.02,    # WS=white spruce
0.62  ,0.55   , 3.17 , 3    , 2   ,    # YB=yellow birch
0.3   ,0.3    , 3.0  , 0    , 0   ),   # other
ncol=5,byrow=TRUE)
sprow = match(SPP,SPcodes)
sprow[is.na(sprow)] = length(SPcodes)
#note that only SPtype, shade, and sg are used in the calling routines.
return(list(SPtype=SPtype[sprow],shade=attrs[sprow,3],sg=attrs[sprow,1]))
}
SPP.func('RO')
document()
document()
library(inventoryfunctions)
build()
