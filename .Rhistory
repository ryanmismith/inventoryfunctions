LMM[4]
View(LMM2)
LMM2[4]
LMM2[4,2]
summary(LMM2)
LMM[4]
plot(LMM)
plot(LMM2)
setwd("~/Thesis/R Script/My Scripts/In The Works")
write.csv(trees)
write.csv(trees.csv)
setwd("~/Thesis/R Script/My Scripts/In The Works")
write.csv(trees, "trees.csv")
lm(HT ~ DBH + SPP, data = test)
lmmod <- lm(HT ~ DBH + SPP, data = test)
summary(lm)
summary(lmmod)
lmmod <- lm(HT ~ DBH + DBH*SPP, data = test)
summary(lmmod)
LLM[4]
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
summary(LMM)
anova(LMM)
LMM[4]
fixef(LMM)
a <- fixef(LMM)
a(1)
a[1]
random <- ranef(LMM)
random
plot(LMM)
tidy(LMM)
nlme::anova.lme(LMM)
x == random["AB"]
if (random == "AB"){
x == random["AB"]
}
if (random == "AB"){
x == random["AB"]
} else {
x == 0
}
?optimal.cutpoints
?predict
b <- fixef(LMM2)
b
b(1)
b[1]
a[1]
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
a <- fixef(LMM)
a[1]
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
a <- fixef(LMM)
b(1)
b[1]
a[1]
random2 <-ranef(LMM2)
cbind(a, b)
bind <- cbind(a, b)
bingb
bind
bind <- cbind(random, random2)
bind
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "RML")
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
summary(LMM)
fixed <- gls(HT ~ DBH, data = test, method = "REML")
anova(LMM, fixed)
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
anova(LMM, LMM2)
anova(LMM, LMM2)
LMM2 <- lmer(HT ~ DBH + (1|SPP), data = test)
summary(LMM2)
anova(LMM2)
anova(LMM)
anova.lme(LMM, LMM2)
LMM2 <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
anova(LMM, LMM2)
anova(LMM, LMM2)
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
LMM2 <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
anova(LMM, LMM2)
summary(LMM)
summary(LMM2)
summary(LMM2)
summary(LMM)
sp <- lme(HT ~ SPP, random = ~1|DBH, data = test, method = "ML")
sp
summary(sp)
summary(LMM)
sp <- lm(HT ~ SPP, data = test, method = "ML")
sp <- lm(HT ~ SPP, data = test, method = "REML")
summary(sp)
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
anova(sp, LMM)
sp <- lm(HT ~ SPP, data = test, method = "REML")
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "REML")
anova(sp, LMM)
summary (sp)
sp <- lm(HT ~ DBH, data = test, method = "REML")
summary (sp)
AIC(LM)
AIC(sp)
AIC(LMM)
LMM2 <- lmer(HT ~ DBH + (1|SPP) + (1|Plot), data = test)
AIC(LMM2)
ranef(LMM2)
ranef(LMM)
testing <- ranef(LMM2)
testing
View(testing)
testing$Plot[1]
testing$SPP[2]
testing$SPP
testing$SPP[,3]
as.data.frame <- testing$Plot
is.vector(as.data.frame)
as.vector(as.data.frame)
as.data.frame <- as.vector(testing$SPP)
is.vector(as.data.frame)
is.list(as.data.frame)
source('~/Thesis/R Script/My Scripts/Cleaning Data/Seven Islands Land Co/CleaningSILC.R', echo=TRUE)
trees <- married
test <- trees %>% dplyr::select(SPP, DBH, HT)
test <- trees %>% dplyr::filter(HT > 0)
LMM <- lme(HT ~ DBH, random = ~1|SPP, data = test, method = "ML")
random <- ranef(LMM)
random <- unstack(random)
random <- stack(random)
random
random <- unstack(random)
random
random <- ranef(LMM)
random
random[1]
random(1)
random["AB"]
random$`(Intercept)`
random
lapply(random, attributes)
attributes(random)
random$row.names
rownames(random)
a <- rownames(random)
b <- random[1]
cbind(a, b)
table1 <- cbind(SPP, Coef)
SPP <- rownames(random)
Coef <- random[1]
table1 <- cbind(SPP, Coef)
table1
table1$SPP
Coef <- random$`(Intercept)`
table1 <- cbind(SPP, Coef)
table1
table1$SPP
table1
table1 <- cbind(SPP, Coef)
table1
table1$SPP
Coef <- random[1]
table1 <- cbind(SPP, Coef)
table1
table1$SPP
table1$`(Intercept)`
fixed <- fixef(LMM)
inter <- fixed[1]
coef <- fixed[2]
sppinter = (for (i in married){
if(married$SPP[i] %in% table1$SPP){
x = table1$`(Intercept)`[which married$SPP %in% table1$SPP]
} else {
x = 0
} return (x[i])
}
)
sppinter = (for (i in married){
if(married$SPP[i] %in% table1$SPP){
x = table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]
} else {
x = 0
} return (x[i])
}
)
}
a <- if(married$SPP[i] %in% table1$SPP){
x = table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]
} else {
x = 0
} return (x[i])
x = table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]
trees %>% mutate(
x = table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]
)
)
)
sppcoef = case_when(
is.na((table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]) == FALSE) ~ table1$`(Intercept)`[which(married$SPP %in% table1$SPP)],
is.na((table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]) == TRUE) ~ 0
)
View(trees)
View(trees)
test = case_when(
is.na((table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]) == FALSE) ~ table1$`(Intercept)`[which(married$SPP %in% table1$SPP)],
is.na((table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]) == TRUE) ~ 0
)
test
trees %>% mutate(
test = (table1$`(Intercept)`[which(married$SPP %in% table1$SPP)]) == FALSE)
test = (table1$`(Intercept)`[which(married$SPP %in% table1$SPP)])
test
test = case_when(married$SPP %in% table1$SPP) ~ (table1$`(Intercept)`[which(married$SPP %in% table1$SPP)])
trees %>% mutate(
test = case_when(married$SPP %in% table1$SPP) ~ (table1$`(Intercept)`[which(married$SPP %in% table1$SPP)])
)
trees %>% mutate(
test = case_when(married$SPP %in% table1$SPP) ~ (table1$`(Intercept)`[which(married$SPP %in% table1$SPP)])
)
trees %>% mutate(
test = case_when(married$SPP %in% table1$SPP) ~ "(table1$`(Intercept)`[which(married$SPP %in% table1$SPP)])"
)
trees %>% mutate(
coeff <- ifelse(SPP %in% table1$SPP), 1, 0
)
trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP), 1, 0
)
trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, 1, 0)
)
View(trees)
View(Coef)
View(Coef)
View(b)
View(Coef)
trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, 1, 0)
)
trees <- trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, 1, 0)
)
View(trees)
tree <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Rangeley 2020 Clean/RangeleyTree.csv")
plot <- readr::read_csv("/Users/ryansmith/Thesis/MasterData/Unedited/7 Islands/Rangeley 2020 Clean/RangeleyPlot.csv")
View(trees)
View(tree)
table1$`(Intercept)`[which(trees$SPP %in% table1$SPP)]
rownames(table1) <- c("SPP", "COEF")
table1
rownames(table1) <- c("SPP","SPP", "COEF")
colnames(table1) <- c("SPP", "COEF")
table1
trees <- trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, table1$`(Intercept)`[which(spp %in% table1$SPP, arr.ind = TRUE)], 0)
)
trees <- trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, table1$COEF[which(spp %in% table1$SPP, arr.ind = TRUE)], 0)
)
trees <- trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, table1$COEF[which(spp %in% table1$SPP)], 0)
)
trees <- trees %>% mutate(
coeff = ifelse(SPP %in% table1$SPP, table1["SPP", "COEF"] , 0)
)
View(trees)
trees <- trees %>% mutate(
coeff = table1["SPP", "COEF"]
)
View(trees)
Table1["AB", "COEF"]
table1["AB", "COEF"]
A <- trees$SPP
trees <- trees %>% mutate(
coeff = table1["A", "COEF"]
)
View(trees)
trees$coeff <- for(i in trees){
table1["A[i]", "COEF"]
}
View(trees)
b <- for(i in trees){
table1["A[i]", "COEF"]
}
b <- for(i in trees){
a = table1["A[i]", "COEF"]
}
b <- for(i in trees){
a = table1[A[i], "COEF"]
}
b <- for(i in trees){
a[i] = table1[A[i], "COEF"]
}
a[i] = table1[A[i], "COEF"]
a[i] = table1[A[i], "COEF"]
a[i] = table1[A[i], "COEF"]}
a[i] = table1[A[i], "COEF"]}
b <- for(i in trees){
a[i] = table1[which(a[i] == "SPP"), "COEF"]
}
b <- for(i in trees){
a[i] = table1[which(a[i] == "SPP"), [i]]
}
b <- for(i in trees){
a[i] = table1[a[i], [i]]
}
b <- for(i in trees){
a[i] = table1[a[i], [i]]
}
a <- ifelse(trees$SPP %in% table1$SPP, 1, 0)
a <- ifelse(trees$SPP %in% table1$SPP, table1[trees$SPP, ], 0)
a <- ifelse(trees$SPP %in% table1$SPP, table1[trees$SPP, "COEF"], 0)
a
trees$coef <- ifelse(trees$SPP %in% table1$SPP, table1[trees$SPP, "COEF"], 0)
View(trees)
View(table1)
fixed <- fixef(LMM)
fixed(1)
fixed[1]
trees$HT1 <- (fixed[1] + trees$coef) + (fixed[2]*trees$DBH)
View(trees)
trees %>% group_by(SPP) %>%
summarize(mean(HT))
trees %>% group_by(SPP) %>%
summarize(mean(HT1))
View(trees)
plot(HT, HT1, data = trees)
View(trees)
attach(trees)
plot(HT, HT1)
test2 <- trees %>% dplyr::filter(trees > 0)
attach(test2)
plot(HT, HT1)
attach(test2)
library(inventoryfunctions)
library(devtools)
library(roxygen2)
example("HeightPredict")
data("tree_data")
trees <- tree_data
rm(tree_data)
View(trees)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
View(trees)
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, PlotSize),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
View(trees)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
View(trees)
tempvol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$TreeVol <- tempvol * trees$EXPF
rm(tempvol)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(HT), .by_group = TRUE)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
View(trees)
25.400^2 * 0.00007854
20/.05067087
trees <- trees %>%
group_by(ID) %>%
arrange(desc(HT), .by_group = TRUE)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
TallestTrees <- function(ID, HT, EXPF){
Temp <- data.frame(ID, HT, EXPF)
Temp <- Temp[order(-HT),]
Temp$csum <- ave(Temp$EXPF, Temp$ID, FUN=cumsum)
for (i in 1:length(Temp$csum)){
if(Temp$csum[1] >= 100){
Temp$X[1] = Temp$HT[1] * Temp$EXPF[1]
Temp$Counts[i] = 100
} else if(Temp$csum[i] <= 100) {
Temp$X[i] = Temp$HT[i] * Temp$EXPF[i]
Temp$Counts[i] = Temp$csum[i]
} else {
Temp$X[i] = NA
Temp$Counts[i] = NA
}
}
if(Temp$Counts >= 100){
Temp$remainder <- ave(Temp$Counts, Temp$ID, FUN = function(x) 100-max(x, na.rm = TRUE))  # Number of trees not included in X
Temp$minheight <- ave(Temp$Counts, Temp$ID, FUN = function(x) Temp$HT[1 + which.max(x)]) # Height of tree not included in X
for (i in 1:length(Temp$remainder)){    # Create column with total combined heights of trees that were missing from column x
Temp$leftover[i] <- Temp$remainder[i] * Temp$minheight[i]
}
Temp$Y <- ave(Temp$X, Temp$ID, FUN = function(x) sum(x, na.rm = TRUE)) #Combined heights of trees in X (cumsum <= 100)
for (i in 1:length(Temp$Y)){
Temp$Total[i] <- Temp$leftover[i] + Temp$Y[i]                        # Create column with combined heights of 100 tallest trees
}
Temp$Result <- ave(Temp$Total, Temp$ID, FUN = function(x) x/100)       # Divide the combined height of 100 tallest trees by 100.
round(Temp$Result, 2)
} else {
Temp$Results <- sum(Temp$HT)/Temp$csum
}
return(Temp$Result)
}
trees$Tall <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
View(trees)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
data("tree_data")
trees <- tree_data
rm(tree_data)
cord <- data.frame(trees$X, trees$Y)
sp::coordinates(cord) <- cord
sp::proj4string(cord) <- sp::CRS("+proj=longlat +datum=WGS84")
CSI <- raster::raster("/Users/ryansmith/Thesis/GIS/Climate Site Index/EastSI_ENSEMBLE_rcp60_2030.tif")
BMGI <- raster::raster("/Users/ryansmith/Thesis/GIS/BGI Raster/BGI_S2REP_ME_Update.tif")
CSIdata   <- raster::extract(CSI, cord, method = 'simple', df = TRUE)
BMGIdata  <- raster::extract(BMGI, cord, method = 'simple', df = TRUE)
trees$CSI <- CSIdata$EastSI_ENSEMBLE_rcp60_2030
trees$BMGI <- BMGIdata$BGI_S2REP_ME_Update
rm(CSI, BMGI, cord, CSIdata, BMGIdata)
trees <- trees %>%
mutate(
EXPF = EXP.F(DBH, BAF),
SDIPlot = SDI.Plot(Stand, Plot, Tree, DBH, EXPF),
SDIMax = SDI.Max(Stand, Plot, Tree, SPP, DBH = DBH, EXPF = EXPF, CSI = CSI, X_Coord = X, Y_Coord = Y),
BA = BA(DBH),
CCF = CrownCompF(Stand, Plot, Tree, SPP, DBH, EXPF),
ID = Unique.ID(Stand, Plot),
RD = RD(SDIPlot, SDIMax),
BAPH = BAPH(Stand, Plot, BA, EXPF),
TPH = TPH(Stand, Plot, DBH, EXPF)
)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
BAL = BA.Larger.Trees(ID, DBH, BA)
)
### Height ###
trees$HT <-  HeightPredict(trees$SPP, trees$DBH, trees$CSI, trees$CCF, trees$BAL, trees$Plot, trees$HT)
tempvol <- mapply(KozakTreeVol, 'ib', trees$SPP, trees$DBH, trees$HT)
trees$TreeVol <- tempvol * trees$EXPF
rm(tempvol)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(DBH), .by_group = TRUE)
trees <- trees %>%
mutate(
CCFL = CCF.Larger(ID, SPP, DBH, EXPF)
)
View(trees)
trees <- trees %>%
group_by(ID) %>%
arrange(desc(HT), .by_group = TRUE)
trees <- trees %>%
mutate(
Tall = TallestTrees(ID, HT, EXPF)
)
View(trees)
