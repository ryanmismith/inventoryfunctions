}
}
# Fix NaN problems in Values ----------------------------------------------
fix_nan <- function(x) {
x[is.nan(x)] <- 0
x
}
TopDiam.List <- temp$TopDiam.List
TopDiam.List <- fix_nan(TopDiam.List)
# Create List of Lower Diameter of Each Section
stump.diam <- KozakTaper(Bark = "ob", SPP, DHT = .3, DBH, HT, Planted = 0)
LowDiam.List <- dplyr::lag(TopDiam.List, default = stump.diam)
# Create list of Section Calls (Saw, Pulp, Cull)
Sections <- c(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10,
"Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp")
for(i in 1:length(Sections)){
if(Sections[i] != "Saw" && Sections[i] != "Cull"){
Sections[i] == "Pulp"
}
}
# International 1/4in Rule for Board Feet ---------------------------------
board.feet <- function(TopDiam) {
a <- 0.049621
b <- 0.00622
c <- 0.185476
d <- 0.000259
e <- 0.011592
f <- 0.04222
len <- 8
inches <- 0.3937008
(a * (len * (inches * TopDiam)^2)) + (b * (len^2 * (inches * TopDiam))) - (c * (len * TopDiam * inches)) +
(d * len^3) - (e * len^2) + (f * len)
}
# Merchandize Sawlogs BF ---------------------------------------------------
#If Sawlogs are called by count
if(Sawlogs > 0 && StartingLog > 0) {
Sections[StartingLog:(Sawlogs + StartingLog)] <- "Saw"
Sections[(Sawlogs + StartingLog):20] <- "Pulp"
} else if(Sawlogs > 0 && StartingLog == FALSE) {
Sections[1:Sawlogs] <- "Saw"
Sections[(Sawlogs + 1):20] <- "Pulp"
} else {
Sections <- Sections
}
if(UnlimLog == TRUE){
for(i in 1:length(Sections)){
if(TopDiam.List[i] >= sd){
Sections[i] <- "Saw"
} else {
Sections[i] <- Sections[i]
}
}
}
merchandize.saw.bf <- function(TopDiam, Sections) {
if (Sections == "Saw" && TopDiam >= sd) {
saw.bf <- board.feet(TopDiam)
saw.bf <- round(saw.bf, 4)
} else {
saw.bf <- 0
}
}
# Merchandize Saw Vol --------------------------------------------------------
merchandize.saw.vol <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Saw" && TopDiam.List >= sd) {
saw.vol <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = LowDiam.List)))
} else {
saw.vol <- 0
}
}
# Merchandize Pulp Vol--------------------------------------------------------
merchandize.pulp <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Pulp" && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = LowDiam.List)))
} else if (Sections == "Saw" && TopDiam.List < sd && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = LowDiam.List)))
} else {
pulp <- 0
}
}
# Cull Vol ----------------------------------------------------------------
merchandize.cull <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Cull") {
cull <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
} else if (Sections == "Saw" && TopDiam.List < pd && TopDiam.List > 1) {
cull <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = LowDiam.List)))
} else if (Sections == "Pulp" && TopDiam.List < pd && TopDiam.List > 1) {
cull <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = LowDiam.List)))
} else {
cull <- 0
}
}
# Create Merch Value Vectors ----------------------------------------------
saw.bf <- mapply(merchandize.saw.bf, TopDiam.List, Sections)
# print(saw.bf)
saw.vol <- mapply(merchandize.saw.vol, TopDiam.List, LowDiam.List, Sections)
pulp.vol <- mapply(merchandize.pulp, TopDiam.List, LowDiam.List, Sections)
cull.vol <- mapply(merchandize.cull, TopDiam.List, LowDiam.List, Sections)
Section.Length <- rep(8, len = length(cull.vol))
Low.Diam.Inch <- round(LowDiam.List * 0.393701, 2)
Top.Diam.Inch <- round(TopDiam.List * 0.393701, 2)
saw.bf <- round(saw.bf, 4)
pulp.vol <- round(pulp.vol, 4)
cull.vol <- round(cull.vol, 4)
saw.vol <- round(saw.vol, 4)
cull.vol <- fix_nan(cull.vol)
saw.vol <- fix_nan(saw.vol)
pulp.vol <- fix_nan(pulp.vol)
saw.bf <- fix_nan(saw.bf)
# Total Merch Data For Tree By Section ------------------------------------
merch.data <- data.frame(Low.Diam.Inch, Top.Diam.Inch, Section.Length, Sections, saw.bf, saw.vol, pulp.vol, cull.vol) # Full Tree Data Frame
print(merch.data)
# Create Sum of Total Values For Tree -------------------------------------
if (Cull == TRUE){
Saw.BF <- 0
Saw.Vol <- 0
Pulp.Vol <- 0
Cull.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
} else {
Saw.BF <- round(sum(saw.bf), 4)
Saw.Vol <- round(sum(saw.vol), 4)
Pulp.Vol <- round(sum(pulp.vol), 4)
Cull.Vol <- round(sum(cull.vol), 4)
}
Total.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
Total.Vol <- round(Total.Vol, 4)
Merch.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = pd)
Merch.Vol <- round(Merch.Vol, 4)
Percent.Sawlog <- round((Saw.Vol / Merch.Vol) * 100, 2)
Percent.Sawlog <- fix_nan(Percent.Sawlog)
Method <- "Stick Cruise"
# Return Values -----------------------------------------------------------
values <- data.frame(Stand, Plot, Tree, Method, SPP, Saw.BF, Saw.Vol, Pulp.Vol, Cull.Vol, Total.Vol, Merch.Vol, Percent.Sawlog)
return(values)
}
Stick.Cruise(1,1,1,"RO", 50, 30, UnlimLog = TRUE)
Stick.Cruise <- function(Stand, Plot, Tree, SPP, DBH, HT, S1 = "Pulp", S2 = "Pulp",
S3 = "Pulp", S4 = "Pulp", S5 = "Pulp", S6 = "Pulp", S7 = "Pulp",
S8 = "Pulp", S9 = "Pulp", S10 = "Pulp", Cull = FALSE,
Sawlogs = FALSE, StartingLog = FALSE, UnlimLog = FALSE, Veneer = FALSE){
# Merchantable Diameter For Species ---------------------------------------
aa <- sapply(SPP, MerchDiam)
sd <- as.numeric(t(aa)[, 1]) # Saw Diameter
pald <- as.numeric(t(aa)[, 2]) # Pallet Diameter
pd <- as.numeric(t(aa)[, 3]) # Pulp Diameter
# Stump Height of .3 Meters (1 ft) - 8 Foot Sections
eight.ft <- seq(.3, 48.568, 2.4384)
a <- seq(.3, 48.568, 2.4384)
temp <- data.frame(eight.ft, a)
for (i in 1:length(temp$eight.ft)){
if (HT > temp$eight.ft[i]) {
temp$TopDiam.List[i] <- KozakTaper(Bark = "ob", SPP, DHT = temp$eight.ft[i+1], DBH, HT, Planted = 0)
} else {
temp$TopDiam.List[i] <- 0
}
}
# Fix NaN problems in Values ----------------------------------------------
fix_nan <- function(x) {
x[is.nan(x)] <- 0
x
}
TopDiam.List <- temp$TopDiam.List
TopDiam.List <- fix_nan(TopDiam.List)
# Create List of Lower Diameter of Each Section
stump.diam <- KozakTaper(Bark = "ob", SPP, DHT = .3, DBH, HT, Planted = 0)
LowDiam.List <- dplyr::lag(TopDiam.List, default = stump.diam)
# Create list of Section Calls (Saw, Pulp, Cull)
Sections <- c(S1, S2, S3, S4, S5, S6, S7, S8, S9, S10,
"Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp", "Pulp")
for(i in 1:length(Sections)){
if(Sections[i] != "Saw" && Sections[i] != "Cull"){
Sections[i] == "Pulp"
}
}
# International 1/4in Rule for Board Feet ---------------------------------
board.feet <- function(TopDiam) {
a <- 0.049621
b <- 0.00622
c <- 0.185476
d <- 0.000259
e <- 0.011592
f <- 0.04222
len <- 8
inches <- 0.3937008
(a * (len * (inches * TopDiam)^2)) + (b * (len^2 * (inches * TopDiam))) - (c * (len * TopDiam * inches)) +
(d * len^3) - (e * len^2) + (f * len)
}
# Merchandize Sawlogs BF ---------------------------------------------------
#If Sawlogs are called by count
if(Sawlogs > 0 && StartingLog > 0) {
Sections[StartingLog:(Sawlogs + StartingLog)] <- "Saw"
Sections[(Sawlogs + StartingLog):20] <- "Pulp"
} else if(Sawlogs > 0 && StartingLog == FALSE) {
Sections[1:Sawlogs] <- "Saw"
Sections[(Sawlogs + 1):20] <- "Pulp"
} else {
Sections <- Sections
}
if(UnlimLog == TRUE){
for(i in 1:length(Sections)){
if(TopDiam.List[i] >= sd){
Sections[i] <- "Saw"
} else {
Sections[i] <- Sections[i]
}
}
}
merchandize.saw.bf <- function(TopDiam, Sections) {
if (Sections == "Saw" && TopDiam >= sd) {
saw.bf <- board.feet(TopDiam)
saw.bf <- round(saw.bf, 4)
} else {
saw.bf <- 0
}
}
# Merchandize Saw Vol --------------------------------------------------------
merchandize.saw.vol <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Saw" && TopDiam.List >= sd) {
saw.vol <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = LowDiam.List)))
} else {
saw.vol <- 0
}
}
# Merchandize Pulp Vol--------------------------------------------------------
merchandize.pulp <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Pulp" && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = LowDiam.List)))
} else if (Sections == "Saw" && TopDiam.List < sd && TopDiam.List >= pd) {
pulp <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topHT = NA, topD = LowDiam.List)))
} else {
pulp <- 0
}
}
# Cull Vol ----------------------------------------------------------------
merchandize.cull <- function(TopDiam.List, LowDiam.List, Sections) {
if (Sections == "Cull") {
cull <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
} else if (Sections == "Saw" && TopDiam.List < pd && TopDiam.List > 1) {
cull <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = LowDiam.List)))
} else if (Sections == "Pulp" && TopDiam.List < pd && TopDiam.List > 1) {
cull <- ((KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = TopDiam.List)) -
(KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = LowDiam.List)))
} else {
cull <- 0
}
}
# Create Merch Value Vectors ----------------------------------------------
saw.bf <- mapply(merchandize.saw.bf, TopDiam.List, Sections)
# print(saw.bf)
saw.vol <- mapply(merchandize.saw.vol, TopDiam.List, LowDiam.List, Sections)
pulp.vol <- mapply(merchandize.pulp, TopDiam.List, LowDiam.List, Sections)
cull.vol <- mapply(merchandize.cull, TopDiam.List, LowDiam.List, Sections)
Section.Length <- rep(8, len = length(cull.vol))
Low.Diam.Inch <- round(LowDiam.List * 0.393701, 2)
Top.Diam.Inch <- round(TopDiam.List * 0.393701, 2)
saw.bf <- round(saw.bf, 4)
pulp.vol <- round(pulp.vol, 4)
cull.vol <- round(cull.vol, 4)
saw.vol <- round(saw.vol, 4)
cull.vol <- fix_nan(cull.vol)
saw.vol <- fix_nan(saw.vol)
pulp.vol <- fix_nan(pulp.vol)
saw.bf <- fix_nan(saw.bf)
# Total Merch Data For Tree By Section ------------------------------------
merch.data <- data.frame(Low.Diam.Inch, Top.Diam.Inch, Section.Length, Sections, saw.bf, saw.vol, pulp.vol, cull.vol) # Full Tree Data Frame
print(merch.data)
# Create Sum of Total Values For Tree -------------------------------------
if (Cull == TRUE){
Saw.BF <- 0
Saw.Vol <- 0
Pulp.Vol <- 0
Cull.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
} else {
Saw.BF <- round(sum(saw.bf), 4)
Saw.Vol <- round(sum(saw.vol), 4)
Pulp.Vol <- round(sum(pulp.vol), 4)
Cull.Vol <- round(sum(cull.vol), 4)
}
Total.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .1, topD = NA)
Total.Vol <- round(Total.Vol, 4)
Merch.Vol <- KozakTreeVol(Bark = "ob", SPP = SPP, DBH = DBH, HT = HT, Planted = 0, stump = .3, topD = pd)
Merch.Vol <- round(Merch.Vol, 4)
Cull.Vol <- Cull.Vol + (Total.Vol - (Cull.Vol + Saw.Vol + Pulp.Vol))
Percent.Sawlog <- round((Saw.Vol / Merch.Vol) * 100, 2)
Percent.Sawlog <- fix_nan(Percent.Sawlog)
Method <- "Stick Cruise"
# Return Values -----------------------------------------------------------
values <- data.frame(Stand, Plot, Tree, Method, SPP, Saw.BF, Saw.Vol, Pulp.Vol, Cull.Vol, Total.Vol, Merch.Vol, Percent.Sawlog)
return(values)
}
Stick.Cruise(1,1,1,"RO", 50, 30, UnlimLog = TRUE)
roxygen2::document()
devtools::document()
devtools::document()
library(inventoryfunctions)
devtools::build()
devtools::run_examples()
devtools::document()
devtools::uses_testthat()
devtools::run_examples()
document()
run_examples()
Stand <- c(1,1,1,1,1,1)
Plot  <- c(1,1,1,2,2,2)
Tree  <- c(1,2,3,1,2,3)
SPP   <- c("RO", "WP", "EH", "YB", "YB", "SM")
EXPF <- c(746.037, 282.52, 86.45, 94.31, 165.21, 361.03)
trees <- data.frame(Stand, Plot, Tree, SPP, EXPF)
EXP.F(42, 120)
EXP.F(23, 120)
EXP.F(61, 120)
EXP.F(25, 120)
EXP.F(55, 120)
EXP.F(15, 120)
DBH <- c(42, 23, 61, 25, 55, 15)
EXPF <- c(866.1473, 2888.249, 410.6111, 2444.614, 505.0856, 6790.595)
SDI.Max(Stand, Plot, Tree, SPP, DBH, EXPF)
trees <- data.frame(Stand, Plot, Tree, SPP, DBH, EXPF)
document()
run_examples()
document()
run_examples()
document()
run_examples()
#'Stick.Cruise(1, 2, 2, 'RO', 68, 26, 'Pulp', 'Saw', 'Saw', Pulp, S5 = "Saw", S6 = "Saw", S7 = "Pulp" S8 = "Cull")
Stick.Cruise(1, 2, 2, 'RO', 68, 26, 'Pulp', 'Saw', 'Saw', Pulp, S5 = "Saw", S6 = "Saw", S7 = "Pulp" S8 = "Cull")
Stick.Cruise(1, 2, 2, 'RO', 68, 26, 'Pulp', 'Saw', 'Saw', Pulp, S5 = "Saw", S6 = "Saw", S7 = "Pulp", S8 = "Cull")
Stick.Cruise(1, 2, 2, 'RO', 68, 26, 'Pulp', 'Saw', 'Saw', "Pulp", S5 = "Saw", S6 = "Saw", S7 = "Pulp", S8 = "Cull")
document()
run_examples()
document()
library(inventoryfunctions)
run_examples()
library(inventoryfunctions)
document()
library(devtools)
document()
build()
library(inventoryfunctions)
library(inventoryfunctions)
library(roxygen2)
library(devtools)
document()
library(inventoryfunctions)
library(devtools)
build()
devtools::document()
library(inventoryfunctions)
build()
devtools::build()
EXP.F(30.48, 20)
1/.25
library(devtools)
library(roxygen2)
document()
build()
library(inventoryfunctions)
EXP.F(30.48, 20)
devtools::document()
library(inventoryfunctions)
devtools::build()
library(inventoryfunctions)
library(roxygen2)
library(devtools)
document()
library(inventoryfunctions)
library(devtools)
library(roxygen2)
document()
library(inventoryfunctions)
build()
DOBtoDIB <- function(SPP,dob){
if(SPP=='AB'){
pcntbark=7
b0_bark=1
b1_bark=1}
else if(SPP=='BC'){
pcntbark=10
b0_bark=1
b1_bark=1}
else if(SPP=='BF'){
pcntbark=0
b0_bark=0.878
b1_bark=1.025}
# else if(SPP=='BP' | SPP=='BA'){            # BLC 09/10/2018 - implement new parameters from J.Frank 09/12/2016
#   pcntbark=18
#   b0_bark=1
#  b1_bark=1}
else if(SPP=='BP'){            # BLC 09/10/2018 - implement new parameters from J.Frank 09/12/2016
pcntbark=0
b0_bark=0.8737
b1_bark=1.012}
else if(SPP=='BA'){            # BLC 09/10/2018 - implement new parameters from J.Frank 09/12/2016
pcntbark=0
b0_bark=0.8499
b1_bark=1.041}
else if(SPP=='BS'){
pcntbark=0
b0_bark=0.871
b1_bark=1.026}
else if(SPP=='BT'){
pcntbark=15
b0_bark=1
b1_bark=1}
else if(SPP=='EH'){
pcntbark=0
b0_bark=0.8916
b1_bark=1.0121}
else if(SPP=='GA'){
pcntbark=13
b0_bark=1
b1_bark=1}
else if(SPP=='GB'){
pcntbark=12
b0_bark=1
b1_bark=1}
else if(SPP=='JP'){
pcntbark=0
b0_bark=0.916
b1_bark=1.01}
else if(SPP=='NS'){
pcntbark=0
b0_bark=0.8558
b1_bark=1.0363}
else if(SPP=='PB'){
pcntbark=0
b0_bark=0.8969
b1_bark=1.0179}
else if(SPP=='QA'){
pcntbark=0
b0_bark=0.8449
b1_bark=1.0332}
else if(SPP=='RM'){
pcntbark=0
b0_bark=0.9214
b1_bark=1.0117}
else if(SPP=='RO'){
pcntbark=11
b0_bark=1
b1_bark=1}
else if(SPP=='RP'){
pcntbark=0
b0_bark=0.928
b1_bark=0.999}
else if(SPP=='RS'){
pcntbark=0
b0_bark=0.864
b1_bark=1.029}
else if(SPP=='SB'){
pcntbark=12
b0_bark=1
b1_bark=1}
else if(SPP=='SM'){
pcntbark=0
b0_bark=0.9383
b1_bark=1.0064}
else if(SPP=='TL' | SPP=='TA'){
pcntbark=0
b0_bark=1.5106
b1_bark=0.8134}
else if(SPP=='WA'){
pcntbark=0
b0_bark=0.8834
b1_bark=1.0188}
else if(SPP=='WC' | SPP=='NC'){
pcntbark=0
b0_bark=0.7797
b1_bark=1.0569}
else if(SPP=='WP'){
pcntbark=0
b0_bark=0.926
b1_bark=1}
else if(SPP=='WS'){
pcntbark=0
b0_bark=0.886
b1_bark=1.022}
else if(SPP=='YB'){
pcntbark=0
b0_bark=0.8688
b1_bark=1.0275}
else if(SPP=='OH'){
pcntbark=0
b0_bark=0.892283333
b1_bark=1.01925}
else if(SPP=='OS'){
pcntbark=0
b0_bark=0.887333009
b1_bark=1.019266336}
else{
pcntbark=0
b0_bark=0.889808171
b1_bark=1.019266336}
dib=ifelse(pcntbark==0,b0_bark*dob^b1_bark,dob*(1-(pcntbark/100)))
return(dib=round(dib,4))
}
DOBtoDIB("SM", 10)
DOBtoDIB("SM", 25.4)
library(roxygen2)
library(devtools)
document()
library(inventoryfunctions)
document()
library(inventoryfunctions)
build()
